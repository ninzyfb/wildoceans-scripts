# only continue with loop if there is data for species
if(nrow(obs.data)>0){
# IUCN data
exists3 = file.info(list.files(pattern = paste(target,".gpkg",sep=""), recursive = TRUE, ignore.case = TRUE))
if(nrow(exists3 !=0)){
iucn_extent = st_read(list.files(pattern = paste(target,".gpkg",sep=""), recursive = TRUE, ignore.case = TRUE))
iucn_extent = as(iucn_extent, Class = "Spatial")}else{rm(iucn_extent)}
rm(exists3)
# my binary data (form modelling)
#exists4 = file.info(list.files(path ="Modelling/Outputs/sdms/",pattern = paste(target,"_Aseasonal_res10_ensemblemeanthreshold",sep=""), recursive = TRUE, ignore.case = TRUE,full.names = TRUE))
#if(nrow(exists4 !=0)){binarymap = raster(list.files(path ="Modelling/Outputs/sdms/",pattern = paste(target,"_Aseasonal_res10_ensemblemeanthreshold",sep=""), recursive = TRUE, ignore.case = TRUE,full.names = TRUE))}
#rm(exists4)
# SPECIES INFO
temp = master %>%
filter(SPECIES_SCIENTIFIC == i)
# EXPERT RANGE
expert = expert_extent[expert_extent$Scientific_name == tolower(target),]
# if expert range exists then convert to spatial object
if(nrow(coordinates(expert))>0){expert = SpatialPoints(expert)}else{rm(expert)}
# plot and save each species as basic map
# save the map in different folder depending on if this species will be modeled or not
# that means based on its 10km resolution prevalence score which needs to be >1
if(temp$rounded_10>0){png(paste0(path,"Dropbox/6-WILDOCEANS/Modelling/Outputs/maps_raw/",target,".png",sep=""),width=3000, height=2000, res=300)}else{png(paste0(path,"Dropbox/6-WILDOCEANS/Modelling/Outputs/maps_raw_unmodelled/",target,".png",sep=""),width=3000, height=2000, res=300)}
plot.new()
plot = levelplot(blank_template,
margin = FALSE,
colorkey=FALSE,
col.regions = "white",
main = paste(target,"\n ",temp$Species_common),
# add blue line IUCN legend
panel = function(x,y,...){
panel.points(x=15.5, y=-27.5, col = "blue",lwd = 1)
panel.points(x=15.5, y=-27.8, col = "green",lwd = 1)
panel.points(x=15.5, y=-28.1, col = "red",lwd = 1)})+
latticeExtra::layer(sp.text(c(14.5,-27.5),paste0("IUCN range"),cex = 0.6))+
latticeExtra::layer(sp.text(c(14.5,-27.8),paste0("Expert range"),cex = 0.6))+
latticeExtra::layer(sp.text(c(14.5,-28.1),paste0("Data"),cex = 0.6))+
# iucn extent
if(exists(iucn_extent)){
latticeExtra::layer(sp.polygons(iucn_extent,col = "blue",lwd = 1.5))+
latticeExtra::layer(sp.polygons(obs.data,col = "red",cex = 0.3, pch = 16))+
# mpa outline
latticeExtra::layer(sp.polygons(mpas,col = "black",lwd = 0.5))+
# eez
latticeExtra::layer(sp.polygons(eez,col = "black",lwd = 1))+
# sa coast
latticeExtra::layer(sp.polygons(sa_coast,col = "black",lwd= 0.5, fill = "white"))+
# points for main cities
latticeExtra::layer(sp.points(places[c(1:3,5,6,18,20:22,10,14),],col = "black",pch = 20))+
# coordinates and city names
# done in three lines as a "pretty" position varies based on their place on the map
latticeExtra::layer(sp.text(coordinates(places)[c(1:3,5,6),],places$Location[c(1:3,5,6)],col = "black",pch = 20,pos=4,cex = 0.5))+
latticeExtra::layer(sp.text(coordinates(places)[c(18,20,21,22),],places$Location[c(18,20,21,22)],col = "black",pch = 20,pos=2,cex = 0.5))+
latticeExtra::layer(sp.text(adjustedcoords,places$Location[c(10,14)],col = "black",pch = 20, pos=2,cex = 0.5))+
# expert range (only plot if it exists) or else just carry on with rest of plot
if(exists("expert")){latticeExtra::layer(sp.points(expert,col = "green",cex = 1, pch = 16))+
latticeExtra::layer(sp.text(coordinates(legend)[1,],paste0("Data points = ",temp$abundance),col = "black",pch = 20, pos=2,cex = 1))+
latticeExtra::layer(sp.text(coordinates(legend)[2,],paste0("Presence cells (5x5km) = ",temp$cells," (",temp$rounded,"%)"),pch = 20, pos=2,cex = 1))+
latticeExtra::layer(sp.text(coordinates(legend)[3,],paste0("Presence cells (10x10km) = ",temp$cells_10," (",temp$rounded_10,"%)"),pch = 20, pos=2,cex = 1))}else{
latticeExtra::layer(sp.text(coordinates(legend)[1,],paste0("Data points = ",temp$abundance),col = "black",pch = 20, pos=2,cex = 1))+
latticeExtra::layer(sp.text(coordinates(legend)[2,],paste0("Presence cells (5x5km) = ",temp$cells," (",temp$rounded,"%)"),pch = 20, pos=2,cex = 1))+
latticeExtra::layer(sp.text(coordinates(legend)[3,],paste0("Presence cells (10x10km) = ",temp$cells_10," (",temp$rounded_10,"%)"),pch = 20, pos=2,cex = 1))}
}else{
# occurrence data
latticeExtra::layer(sp.polygons(obs.data,col = "red",cex = 0.3, pch = 16))+
# mpa outline
latticeExtra::layer(sp.polygons(mpas,col = "black",lwd = 0.5))+
# eez
latticeExtra::layer(sp.polygons(eez,col = "black",lwd = 1))+
# sa coast
latticeExtra::layer(sp.polygons(sa_coast,col = "black",lwd= 0.5, fill = "white"))+
# points for main cities
latticeExtra::layer(sp.points(places[c(1:3,5,6,18,20:22,10,14),],col = "black",pch = 20))+
# coordinates and city names
# done in three lines as a "pretty" position varies based on their place on the map
latticeExtra::layer(sp.text(coordinates(places)[c(1:3,5,6),],places$Location[c(1:3,5,6)],col = "black",pch = 20,pos=4,cex = 0.5))+
latticeExtra::layer(sp.text(coordinates(places)[c(18,20,21,22),],places$Location[c(18,20,21,22)],col = "black",pch = 20,pos=2,cex = 0.5))+
latticeExtra::layer(sp.text(adjustedcoords,places$Location[c(10,14)],col = "black",pch = 20, pos=2,cex = 0.5))+
# expert range (only plot if it exists) or else just carry on with rest of plot
if(exists("expert")){latticeExtra::layer(sp.points(expert,col = "green",cex = 1, pch = 16))+
latticeExtra::layer(sp.text(coordinates(legend)[1,],paste0("Data points = ",temp$abundance),col = "black",pch = 20, pos=2,cex = 1))+
latticeExtra::layer(sp.text(coordinates(legend)[2,],paste0("Presence cells (5x5km) = ",temp$cells," (",temp$rounded,"%)"),pch = 20, pos=2,cex = 1))+
latticeExtra::layer(sp.text(coordinates(legend)[3,],paste0("Presence cells (10x10km) = ",temp$cells_10," (",temp$rounded_10,"%)"),pch = 20, pos=2,cex = 1))}else{
latticeExtra::layer(sp.text(coordinates(legend)[1,],paste0("Data points = ",temp$abundance),col = "black",pch = 20, pos=2,cex = 1))+
latticeExtra::layer(sp.text(coordinates(legend)[2,],paste0("Presence cells (5x5km) = ",temp$cells," (",temp$rounded,"%)"),pch = 20, pos=2,cex = 1))+
latticeExtra::layer(sp.text(coordinates(legend)[3,],paste0("Presence cells (10x10km) = ",temp$cells_10," (",temp$rounded_10,"%)"),pch = 20, pos=2,cex = 1))}}
print(plot)
dev.off()
rm(species,obs.data,expert,iucn_extent,pts)
}}
# this loops plots a raw map for each species with data
for(i in master$SPECIES_SCIENTIFIC){
# species name
target = i
# folder with occurrence data files (all stored as R object)
folder = "speciesdata/"
# run script to load species data
source(list.files(pattern = "species_data.R", recursive = TRUE))
rm(folder)
# only continue with loop if there is data for species
if(nrow(obs.data)>0){
# IUCN data
exists3 = file.info(list.files(pattern = paste(target,".gpkg",sep=""), recursive = TRUE, ignore.case = TRUE))
if(nrow(exists3 !=0)){
iucn_extent = st_read(list.files(pattern = paste(target,".gpkg",sep=""), recursive = TRUE, ignore.case = TRUE))
iucn_extent = as(iucn_extent, Class = "Spatial")}else{rm(iucn_extent)}
rm(exists3)
# my binary data (form modelling)
#exists4 = file.info(list.files(path ="Modelling/Outputs/sdms/",pattern = paste(target,"_Aseasonal_res10_ensemblemeanthreshold",sep=""), recursive = TRUE, ignore.case = TRUE,full.names = TRUE))
#if(nrow(exists4 !=0)){binarymap = raster(list.files(path ="Modelling/Outputs/sdms/",pattern = paste(target,"_Aseasonal_res10_ensemblemeanthreshold",sep=""), recursive = TRUE, ignore.case = TRUE,full.names = TRUE))}
#rm(exists4)
# SPECIES INFO
temp = master %>%
filter(SPECIES_SCIENTIFIC == i)
# EXPERT RANGE
expert = expert_extent[expert_extent$Scientific_name == tolower(target),]
# if expert range exists then convert to spatial object
if(nrow(coordinates(expert))>0){expert = SpatialPoints(expert)}else{rm(expert)}
# plot and save each species as basic map
# save the map in different folder depending on if this species will be modeled or not
# that means based on its 10km resolution prevalence score which needs to be >1
if(temp$rounded_10>0){png(paste0(path,"Dropbox/6-WILDOCEANS/Modelling/Outputs/maps_raw/",target,".png",sep=""),width=3000, height=2000, res=300)}else{png(paste0(path,"Dropbox/6-WILDOCEANS/Modelling/Outputs/maps_raw_unmodelled/",target,".png",sep=""),width=3000, height=2000, res=300)}
plot.new()
plot = levelplot(blank_template,
margin = FALSE,
colorkey=FALSE,
col.regions = "white",
main = paste(target,"\n ",temp$Species_common),
# add blue line IUCN legend
panel = function(x,y,...){
panel.points(x=15.5, y=-27.5, col = "blue",lwd = 1)
panel.points(x=15.5, y=-27.8, col = "green",lwd = 1)
panel.points(x=15.5, y=-28.1, col = "red",lwd = 1)})+
latticeExtra::layer(sp.text(c(14.5,-27.5),paste0("IUCN range"),cex = 0.6))+
latticeExtra::layer(sp.text(c(14.5,-27.8),paste0("Expert range"),cex = 0.6))+
latticeExtra::layer(sp.text(c(14.5,-28.1),paste0("Data"),cex = 0.6))+
# iucn extent
if(exists("iucn_extent")){
latticeExtra::layer(sp.polygons(iucn_extent,col = "blue",lwd = 1.5))+
latticeExtra::layer(sp.polygons(obs.data,col = "red",cex = 0.3, pch = 16))+
# mpa outline
latticeExtra::layer(sp.polygons(mpas,col = "black",lwd = 0.5))+
# eez
latticeExtra::layer(sp.polygons(eez,col = "black",lwd = 1))+
# sa coast
latticeExtra::layer(sp.polygons(sa_coast,col = "black",lwd= 0.5, fill = "white"))+
# points for main cities
latticeExtra::layer(sp.points(places[c(1:3,5,6,18,20:22,10,14),],col = "black",pch = 20))+
# coordinates and city names
# done in three lines as a "pretty" position varies based on their place on the map
latticeExtra::layer(sp.text(coordinates(places)[c(1:3,5,6),],places$Location[c(1:3,5,6)],col = "black",pch = 20,pos=4,cex = 0.5))+
latticeExtra::layer(sp.text(coordinates(places)[c(18,20,21,22),],places$Location[c(18,20,21,22)],col = "black",pch = 20,pos=2,cex = 0.5))+
latticeExtra::layer(sp.text(adjustedcoords,places$Location[c(10,14)],col = "black",pch = 20, pos=2,cex = 0.5))+
# expert range (only plot if it exists) or else just carry on with rest of plot
if(exists("expert")){latticeExtra::layer(sp.points(expert,col = "green",cex = 1, pch = 16))+
latticeExtra::layer(sp.text(coordinates(legend)[1,],paste0("Data points = ",temp$abundance),col = "black",pch = 20, pos=2,cex = 1))+
latticeExtra::layer(sp.text(coordinates(legend)[2,],paste0("Presence cells (5x5km) = ",temp$cells," (",temp$rounded,"%)"),pch = 20, pos=2,cex = 1))+
latticeExtra::layer(sp.text(coordinates(legend)[3,],paste0("Presence cells (10x10km) = ",temp$cells_10," (",temp$rounded_10,"%)"),pch = 20, pos=2,cex = 1))}else{
latticeExtra::layer(sp.text(coordinates(legend)[1,],paste0("Data points = ",temp$abundance),col = "black",pch = 20, pos=2,cex = 1))+
latticeExtra::layer(sp.text(coordinates(legend)[2,],paste0("Presence cells (5x5km) = ",temp$cells," (",temp$rounded,"%)"),pch = 20, pos=2,cex = 1))+
latticeExtra::layer(sp.text(coordinates(legend)[3,],paste0("Presence cells (10x10km) = ",temp$cells_10," (",temp$rounded_10,"%)"),pch = 20, pos=2,cex = 1))}}else{
# occurrence data
latticeExtra::layer(sp.polygons(obs.data,col = "red",cex = 0.3, pch = 16))+
# mpa outline
latticeExtra::layer(sp.polygons(mpas,col = "black",lwd = 0.5))+
# eez
latticeExtra::layer(sp.polygons(eez,col = "black",lwd = 1))+
# sa coast
latticeExtra::layer(sp.polygons(sa_coast,col = "black",lwd= 0.5, fill = "white"))+
# points for main cities
latticeExtra::layer(sp.points(places[c(1:3,5,6,18,20:22,10,14),],col = "black",pch = 20))+
# coordinates and city names
# done in three lines as a "pretty" position varies based on their place on the map
latticeExtra::layer(sp.text(coordinates(places)[c(1:3,5,6),],places$Location[c(1:3,5,6)],col = "black",pch = 20,pos=4,cex = 0.5))+
latticeExtra::layer(sp.text(coordinates(places)[c(18,20,21,22),],places$Location[c(18,20,21,22)],col = "black",pch = 20,pos=2,cex = 0.5))+
latticeExtra::layer(sp.text(adjustedcoords,places$Location[c(10,14)],col = "black",pch = 20, pos=2,cex = 0.5))+
# expert range (only plot if it exists) or else just carry on with rest of plot
if(exists("expert")){latticeExtra::layer(sp.points(expert,col = "green",cex = 1, pch = 16))+
latticeExtra::layer(sp.text(coordinates(legend)[1,],paste0("Data points = ",temp$abundance),col = "black",pch = 20, pos=2,cex = 1))+
latticeExtra::layer(sp.text(coordinates(legend)[2,],paste0("Presence cells (5x5km) = ",temp$cells," (",temp$rounded,"%)"),pch = 20, pos=2,cex = 1))+
latticeExtra::layer(sp.text(coordinates(legend)[3,],paste0("Presence cells (10x10km) = ",temp$cells_10," (",temp$rounded_10,"%)"),pch = 20, pos=2,cex = 1))}else{
latticeExtra::layer(sp.text(coordinates(legend)[1,],paste0("Data points = ",temp$abundance),col = "black",pch = 20, pos=2,cex = 1))+
latticeExtra::layer(sp.text(coordinates(legend)[2,],paste0("Presence cells (5x5km) = ",temp$cells," (",temp$rounded,"%)"),pch = 20, pos=2,cex = 1))+
latticeExtra::layer(sp.text(coordinates(legend)[3,],paste0("Presence cells (10x10km) = ",temp$cells_10," (",temp$rounded_10,"%)"),pch = 20, pos=2,cex = 1))}}
print(plot)
dev.off()
rm(species,obs.data,expert,iucn_extent,pts)}}
# ---------------------------------
# PACKAGES
# ---------------------------------
# list of required packages
requiredpackages = c("readxl","viridis","devtools","fuzzySim","dismo","rgdal","rgeos","sf","rasterVis","ggplot2","mecofun","raster","stringr","readxl", "raster", "sp", "dplyr", "lubridate")
# load packages
lapply(requiredpackages,require, character.only = TRUE)
rm(requiredpackages)
# ---------------------------------
# DEFINE WORKING DIRECTORY
# ---------------------------------
# set directory to same parent folder where sub-scripts are found
# the subs-scripts can be in folders within this directory as the code will look through all the folders
path = "/home/nina/" # path for linux
my.directory = paste0(path,"Dropbox/6-WILDOCEANS")
# set directory
setwd(my.directory)
# ---------------------------------
#  SPECIES SPECIFIC MODEL PARAMETERS
# ---------------------------------
# read master file with species-specific modelling parameters
# this sheet contains a list of all species with some additional data details
# the prevalence value indicates how much data there is for this species
# prevalence is the percentage of cells with data out of total cells
master = read_xlsx(list.files(pattern = "data_summary_master.xlsx", recursive = TRUE,full.names = TRUE))
# ---------------------------------
#  PLOTTING LAYERS
# ---------------------------------
source(list.files(pattern = "plottingparameters.R", recursive = TRUE, full.names= TRUE))
# ---------------------------------
#  GRID
# ---------------------------------
# specify your chosen resolution of models
# here we chose a grid of either 5 x 5 km (res = 5) or 10 x 10 km (res = 10)
res = 10
if(res == 5){
# load appropriate grid
template = raster(list.files(pattern = "template_5km.tif", recursive = TRUE, full.names = TRUE))
# filter master sheet to keep species with enough prevalence for chosen resolution
# in our case we required a minimum prevalence of 1
master_keep = master %>%
filter(rounded >=1)
# number of background points to use during model development
# we went with 20% of total cells
# code to figure out 20% of cells: 0.2*length(which(values(template)==1))
n_bckg_pts = 8410}
if(res == 10){
# load appropriate grid
template = raster(list.files(pattern = "template_10km.tif", recursive = TRUE, full.names = TRUE))
# filter master sheet to keep species with enough prevalence for chosen resolution
# in our case we required a minimum prevalence of 1
master_keep = master %>%
filter(rounded_10>=1)
# number of background points to use during model development
# we went with 20% of total cells
# code to figure out 20% of cells: 0.2*length(which(values(template)==1))
n_bckg_pts = 2162}
# ---------------------------------
#  - ENVIRONMENTAL VARIABLES
# ---------------------------------
source(list.files(pattern = "envnt_variable_stack.R", recursive = TRUE, full.names = TRUE))
plot(stack_subset)
subset(stack_subset,"substrate_simplified")
subset(stack_subset,!("substrate_simplified"))
subset(stack_subset,!substrate_simplified)
subset(stack_subset,!"substrate_simplified")
?subset
subset(stack_subset,"substrate_simplified",drop=TRUE)
subset(stack_subset,"substrate_simplified",drop=FALSE)
dropLayer(stack_subset,"substrate_simplified")
View(master_keep)
# ---------------------------------
#  RUNNING THE MODELS
# ---------------------------------
# the following loop runs the models for each species and creates plots
for(i in 1:nrow(master_keep)){
# MODEL PARAMATERS
target = master_keep$SPECIES_SCIENTIFIC[i] # species name
folder = "speciesdata/" # folder with occurrence data files
substrate = master_keep$Substrate[i] # specifies if substrate layer is to be included
seasonal = "no" # specifies if seasonal (summer & winter) models are too also be run
# OCCURRENCE DATA
source(list.files(pattern = "species_data.R", recursive = TRUE, full.names = TRUE)) # finds script in directory
rm(folder)
# SAMPLING BIAS
source(list.files(pattern = "subsampling.R", recursive = TRUE, full.names = TRUE))
# BACKGROUND SAMPLE
source(list.files(pattern ="pseudoabsence_1.R", recursive = TRUE, full.names = TRUE))
# COLLINEARITY
#source(list.files(pattern = "variableselection.R", recursive = TRUE, full.names = TRUE))
# BIOMOD OBJECT CREATION
source(list.files(pattern = "Biomod.R", recursive = TRUE, full.names = TRUE))
# ASEASONAL MODEL RUNS AND PROJECTIONS
model_type = "Aseasonal" # specify model_type
data = biomod_obj # specify which biomod_obj
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])
# SEASONAL MODEL RUNS AND PROJECTIONS
if(seasonal == "yes"){
model_type = "summer"
season = 1
data = biomod_obj_seasons[[season]]
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])
model_type = "winter"
season = 2
data = biomod_obj_seasons[[season]]
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])}
rm(stack_subset,stack_new)}
# ---------------------------------
#  PLOTTING LAYERS
# ---------------------------------
source(list.files(pattern = "plottingparameters.R", recursive = TRUE, full.names= TRUE))
# ---------------------------------
#  - ENVIRONMENTAL VARIABLES
# ---------------------------------
source(list.files(pattern = "envnt_variable_stack.R", recursive = TRUE, full.names = TRUE))
# ---------------------------------
#  RUNNING THE MODELS
# ---------------------------------
# the following loop runs the models for each species and creates plots
for(i in 2:nrow(master_keep)){
# MODEL PARAMATERS
target = master_keep$SPECIES_SCIENTIFIC[i] # species name
folder = "speciesdata/" # folder with occurrence data files
substrate = master_keep$Substrate[i] # specifies if substrate layer is to be included
seasonal = "no" # specifies if seasonal (summer & winter) models are too also be run
# OCCURRENCE DATA
source(list.files(pattern = "species_data.R", recursive = TRUE, full.names = TRUE)) # finds script in directory
rm(folder)
# SAMPLING BIAS
source(list.files(pattern = "subsampling.R", recursive = TRUE, full.names = TRUE))
# BACKGROUND SAMPLE
source(list.files(pattern ="pseudoabsence_1.R", recursive = TRUE, full.names = TRUE))
# COLLINEARITY
#source(list.files(pattern = "variableselection.R", recursive = TRUE, full.names = TRUE))
# BIOMOD OBJECT CREATION
source(list.files(pattern = "Biomod.R", recursive = TRUE, full.names = TRUE))
# ASEASONAL MODEL RUNS AND PROJECTIONS
model_type = "Aseasonal" # specify model_type
data = biomod_obj # specify which biomod_obj
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])
# SEASONAL MODEL RUNS AND PROJECTIONS
if(seasonal == "yes"){
model_type = "summer"
season = 1
data = biomod_obj_seasons[[season]]
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])
model_type = "winter"
season = 2
data = biomod_obj_seasons[[season]]
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])}}
substrate == "no"
!is.na(substrate) & substrate != "yes"
!is.na(substrate) & substrate == "no"
# ---------------------------------
#  RUNNING THE MODELS
# ---------------------------------
# the following loop runs the models for each species and creates plots
for(i in 6:nrow(master_keep)){
# MODEL PARAMATERS
target = master_keep$SPECIES_SCIENTIFIC[i] # species name
folder = "speciesdata/" # folder with occurrence data files
substrate = master_keep$Substrate[i] # specifies if substrate layer is to be included
seasonal = "no" # specifies if seasonal (summer & winter) models are too also be run
# OCCURRENCE DATA
source(list.files(pattern = "species_data.R", recursive = TRUE, full.names = TRUE)) # finds script in directory
rm(folder)
# SAMPLING BIAS
source(list.files(pattern = "subsampling.R", recursive = TRUE, full.names = TRUE))
# BACKGROUND SAMPLE
source(list.files(pattern ="pseudoabsence_1.R", recursive = TRUE, full.names = TRUE))
# COLLINEARITY
#source(list.files(pattern = "variableselection.R", recursive = TRUE, full.names = TRUE))
# BIOMOD OBJECT CREATION
source(list.files(pattern = "Biomod.R", recursive = TRUE, full.names = TRUE))
# ASEASONAL MODEL RUNS AND PROJECTIONS
model_type = "Aseasonal" # specify model_type
data = biomod_obj # specify which biomod_obj
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])
# SEASONAL MODEL RUNS AND PROJECTIONS
if(seasonal == "yes"){
model_type = "summer"
season = 1
data = biomod_obj_seasons[[season]]
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])
model_type = "winter"
season = 2
data = biomod_obj_seasons[[season]]
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])}}
# ---------------------------------
# PACKAGES
# ---------------------------------
# list of required packages
requiredpackages = c("readxl","viridis","devtools","fuzzySim","dismo","rgdal","rgeos","sf","rasterVis","ggplot2","mecofun","raster","stringr","readxl", "raster", "sp", "dplyr", "lubridate")
# load packages
lapply(requiredpackages,require, character.only = TRUE)
rm(requiredpackages)
# ---------------------------------
# DEFINE WORKING DIRECTORY
# ---------------------------------
# set directory to same parent folder where sub-scripts are found
# the subs-scripts can be in folders within this directory as the code will look through all the folders
path = "/home/nina/" # path for linux
my.directory = paste0(path,"Dropbox/6-WILDOCEANS")
# set directory
setwd(my.directory)
# ---------------------------------
#  SPECIES SPECIFIC MODEL PARAMETERS
# ---------------------------------
# read master file with species-specific modelling parameters
# this sheet contains a list of all species with some additional data details
# the prevalence value indicates how much data there is for this species
# prevalence is the percentage of cells with data out of total cells
master = read_xlsx(list.files(pattern = "data_summary_master.xlsx", recursive = TRUE,full.names = TRUE))
# ---------------------------------
#  PLOTTING LAYERS
# ---------------------------------
source(list.files(pattern = "plottingparameters.R", recursive = TRUE, full.names= TRUE))
# ---------------------------------
#  GRID
# ---------------------------------
# specify your chosen resolution of models
# here we chose a grid of either 5 x 5 km (res = 5) or 10 x 10 km (res = 10)
res = 10
if(res == 5){
# load appropriate grid
template = raster(list.files(pattern = "template_5km.tif", recursive = TRUE, full.names = TRUE))
# filter master sheet to keep species with enough prevalence for chosen resolution
# in our case we required a minimum prevalence of 1
master_keep = master %>%
filter(rounded >=1)
# number of background points to use during model development
# we went with 20% of total cells
# code to figure out 20% of cells: 0.2*length(which(values(template)==1))
n_bckg_pts = 8410}
if(res == 10){
# load appropriate grid
template = raster(list.files(pattern = "template_10km.tif", recursive = TRUE, full.names = TRUE))
# filter master sheet to keep species with enough prevalence for chosen resolution
# in our case we required a minimum prevalence of 1
master_keep = master %>%
filter(rounded_10>=1)
# number of background points to use during model development
# we went with 20% of total cells
# code to figure out 20% of cells: 0.2*length(which(values(template)==1))
n_bckg_pts = 2162}
# ---------------------------------
#  - ENVIRONMENTAL VARIABLES
# ---------------------------------
source(list.files(pattern = "envnt_variable_stack.R", recursive = TRUE, full.names = TRUE))
View(master_keep)
i=217
i=17
# MODEL PARAMATERS
target = master_keep$SPECIES_SCIENTIFIC[i] # species name
# ---------------------------------
#  RUNNING THE MODELS
# ---------------------------------
# the following loop runs the models for each species and creates plots
for(i in 17:nrow(master_keep)){
# MODEL PARAMATERS
target = master_keep$SPECIES_SCIENTIFIC[i] # species name
folder = "speciesdata/" # folder with occurrence data files
substrate = master_keep$Substrate[i] # specifies if substrate layer is to be included
seasonal = "no" # specifies if seasonal (summer & winter) models are too also be run
# OCCURRENCE DATA
source(list.files(pattern = "species_data.R", recursive = TRUE, full.names = TRUE)) # finds script in directory
rm(folder)
# SAMPLING BIAS
source(list.files(pattern = "subsampling.R", recursive = TRUE, full.names = TRUE))
# BACKGROUND SAMPLE
source(list.files(pattern ="pseudoabsence_1.R", recursive = TRUE, full.names = TRUE))
# COLLINEARITY
#source(list.files(pattern = "variableselection.R", recursive = TRUE, full.names = TRUE))
# BIOMOD OBJECT CREATION
source(list.files(pattern = "Biomod.R", recursive = TRUE, full.names = TRUE))
# ASEASONAL MODEL RUNS AND PROJECTIONS
model_type = "Aseasonal" # specify model_type
data = biomod_obj # specify which biomod_obj
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])
# SEASONAL MODEL RUNS AND PROJECTIONS
if(seasonal == "yes"){
model_type = "summer"
season = 1
data = biomod_obj_seasons[[season]]
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])
model_type = "winter"
season = 2
data = biomod_obj_seasons[[season]]
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])}}
View(master_keep)
# ---------------------------------
#  RUNNING THE MODELS
# ---------------------------------
# the following loop runs the models for each species and creates plots
for(i in 33:nrow(master_keep)){
# MODEL PARAMATERS
target = master_keep$SPECIES_SCIENTIFIC[i] # species name
folder = "speciesdata/" # folder with occurrence data files
substrate = master_keep$Substrate[i] # specifies if substrate layer is to be included
seasonal = "no" # specifies if seasonal (summer & winter) models are too also be run
# OCCURRENCE DATA
source(list.files(pattern = "species_data.R", recursive = TRUE, full.names = TRUE)) # finds script in directory
rm(folder)
# SAMPLING BIAS
source(list.files(pattern = "subsampling.R", recursive = TRUE, full.names = TRUE))
# BACKGROUND SAMPLE
source(list.files(pattern ="pseudoabsence_1.R", recursive = TRUE, full.names = TRUE))
# COLLINEARITY
#source(list.files(pattern = "variableselection.R", recursive = TRUE, full.names = TRUE))
# BIOMOD OBJECT CREATION
source(list.files(pattern = "Biomod.R", recursive = TRUE, full.names = TRUE))
# ASEASONAL MODEL RUNS AND PROJECTIONS
model_type = "Aseasonal" # specify model_type
data = biomod_obj # specify which biomod_obj
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])
# SEASONAL MODEL RUNS AND PROJECTIONS
if(seasonal == "yes"){
model_type = "summer"
season = 1
data = biomod_obj_seasons[[season]]
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])
model_type = "winter"
season = 2
data = biomod_obj_seasons[[season]]
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])}}
