biomod_obj_seasons[[i]] =  BIOMOD_FormatingData(resp.var = pa, # presence/absence data
expl.var = exp, # environmental variables
resp.xy = pa_xy,
resp.name = target, # species name
# random background cells at 20% area of EEZ (5km2 res): 8500
PA.nb.absences = n_bckg_pts,
PA.nb.rep = 1,
# for high specificity pseudo-absences should be randomly selected
# OR they can also be chosen at a minimal and maximum distance from presence points
PA.strategy = 'random')
}}
model_type = "Aseasonal" # specify model_type
data = biomod_obj # specify which biomod_obj
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])
View(pts_env)
library(dplyr)
library(lubridate)
library(stringr)
library(plyr)
library(sf)
library(ggplot2)
library(readxl)
# ---------------------------------
# PACKAGES
# ---------------------------------
library(dplyr)
library(lubridate)
library(stringr)
library(plyr)
library(sf)
library(ggplot2)
library(readxl)
# ---------------------------------
# DIRECTORY
# ---------------------------------
# define your path
# for me it changes based on if I am working on pc or mac
path = "/home/nina/Documents/" # path for linux
path =  "/Users/nfb/" # path for mac
setwd(paste0(path,"Dropbox/6-WILDOCEANS"))
# ---------------------------------
# DATA
# ---------------------------------
# list all csv files in cleaned folder
# each csv file is a different cleaned dataset
temp = list.files(path = "/Users/nfb/Dropbox/6-WILDOCEANS/OccurenceData/2-Cleaned_data/Point_data",pattern="*.csv", recursive = TRUE, full.names = TRUE)
# ---------------------------------
# FORMATTING
# ---------------------------------
# read all files into a list
myfiles = lapply(temp, read.csv, header = TRUE)
# turn all headers to capital
for(i in 1:length(myfiles)){
colnames(myfiles[[i]]) = toupper(colnames(myfiles[[i]]))
}
# combine all files in one dataset
library(plyr)
summary = do.call(rbind.fill,myfiles)
detach("package:plyr")
# remove unnecessary variables
rm(myfiles, temp,i)
# keep headers of interest only
headers = toupper(c("Species_scientific","Longitude","Latitude","Date","Dataset","Season"))
summary2 = summary[,colnames(summary)[colnames(summary) %in% headers]]
rm(headers,summary)
View(summary2)
# trim white space after scientific names
summary2$SPECIES_SCIENTIFIC = trimws(summary2$SPECIES_SCIENTIFIC, which = "both")
# Remove any observations are lacking a species name
absentspp = summary2[is.na(summary2$SPECIES_SCIENTIFIC),]
rm(absentspp) # remove unnecessary variable
summary2 = summary2 %>%
filter(!is.na(SPECIES_SCIENTIFIC))
# Format dates
# check how many sightings do not have a date
nodate = summary2[is.na(summary2$DATE),]
rm(nodate)# remove unnecessary variable
# remove them
summary2 = summary2 %>%
filter(!is.na(DATE))
# format all dates and specify different formats
summary2$DATE2 = parse_date_time(summary2$DATE,orders = c("dmy","dmY","Y"))
unformated = summary2[is.na(summary2$DATE2),] # check which observations don't have a formatted date
rm(unformated)# remove unnecessary variable
# remove
summary2 = summary2 %>%
filter(!is.na(DATE2))
# check empty datasets
missingdataset= summary2[is.na(summary2$DATASET),] # check which observations don't have a formatted date
rm(missingdataset)
# Add genus
summary2$Genus = word(summary2$SPECIES_SCIENTIFIC, 1)
# capitalise species names
summary2$SPECIES_SCIENTIFIC = toupper(summary2$SPECIES_SCIENTIFIC)
# look at range of dates
range(summary2$DATE2)
# turn dataset to factor
summary2$DATASET = as.factor(summary2$DATASET)
# add year to data
summary2$year = year(summary2$DATE2)
# plot of which years each dataset have
png("/Users/nfb/Dropbox/6-WILDOCEANS/OccurenceData/2-Cleaned_data/data_explorationplots/summaryplot_yearsperdataset.png", units="in", width=5, height=5, res=300)
ggplot(summary2, aes(DATASET,year, colour = DATASET))+
geom_point()+
theme(axis.text.x = element_text(angle = 90,hjust=0.95,vjust=0.2,size = 5),
legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_blank())+
# line at 1950 which indicates the GBIF data you are removing
geom_hline(yintercept=1950,colour = "red")
dev.off()
# second plot from 1950 onwards
png("/Users/nfb/Dropbox/6-WILDOCEANS/OccurenceData/2-Cleaned_data/data_explorationplots/summaryplot_yearsperdataset_1950onwards.png", units="in", width=5, height=5, res=300)
ggplot(summary2, aes(DATASET,year, colour = DATASET))+
geom_point()+
# rotate x axis
theme(axis.text.x = element_text(angle = 90,hjust=0.95,vjust=0.2, size = 5),
legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_blank())+
scale_y_continuous(breaks=seq(1950,2022,10), limits = c(1950,2022))
dev.off()
# filter to only keep data points after 1950
# this only filters GBIF data in any case
summary3 = summary2 %>%
filter(DATE2 >= as.Date("1950-01-01"))
rm(summary2)
# check date range again
range(summary3$DATE2)
# trim white space
summary3$SPECIES_SCIENTIFIC = trimws(summary3$SPECIES_SCIENTIFIC, which = "both")
# some species names contain hidden characters
# this cleans all the hidden characters out
for(i in 1:nrow(summary3)){
summary3[i,4] = str_replace_all(summary3[i,4], "\\s", " ")
}
rm(i)
# change synonyms
# load data sheet with species names to change
# this sheet contains any historical species names that need to be updated
synonym_sheet = read_xlsx(list.files(path = "/Users/nfb/Dropbox/6-WILDOCEANS/","synonymies.xlsx",recursive = TRUE,full.names = TRUE))
# change names to upper case
synonym_sheet$Incorrect_name =toupper(synonym_sheet$Incorrect_name)
synonym_sheet$Correct_name =toupper(synonym_sheet$Correct_name)
# change any synonyms
for(i in 1:nrow(synonym_sheet)){
summary3 = summary3 %>%
mutate(SPECIES_SCIENTIFIC = ifelse(SPECIES_SCIENTIFIC == synonym_sheet$Incorrect_name[i],synonym_sheet$Correct_name[i],SPECIES_SCIENTIFIC))
}
rm(synonym_sheet,i)
# number of species
sort(unique(summary3$SPECIES_SCIENTIFIC))
# number of species
look = sort(unique(summary3$SPECIES_SCIENTIFIC))
# number of species
look = data.frame(sort(unique(summary3$SPECIES_SCIENTIFIC)))
View(look)
# summarise number of counts by species name
observation_counts = summary3 %>%
group_by(SPECIES_SCIENTIFIC)%>%
summarise(count = n())
# extract species that are lumped together in a group
spp = str_detect(observation_counts$SPECIES_SCIENTIFIC," SPP")
groups = observation_counts[spp,]
observation_counts = observation_counts[!spp,]
# extract species that are lumped together in a group
sp = str_detect(observation_counts$SPECIES_SCIENTIFIC," SP\\.")
groups2 = observation_counts[sp,]
observation_counts = observation_counts[!sp,]
# combine removed species
groups = rbind(groups,groups2)
rm(groups2)
# remove observations of less than 5
observation_counts = observation_counts %>%
filter(SPECIES_SCIENTIFIC != "0") %>%
filter(SPECIES_SCIENTIFIC != "UNKNOWN")
View(observation_counts)
length(str_split(observation_counts$SPECIES_SCIENTIFIC," "))
str_split(observation_counts$SPECIES_SCIENTIFIC," ")
length(str_split(observation_counts$SPECIES_SCIENTIFIC," ")[[1]])
length(str_split(observation_counts$SPECIES_SCIENTIFIC," ")[[]])
length(str_split(observation_counts$SPECIES_SCIENTIFIC," ")[[]][1])
str_split(observation_counts$SPECIES_SCIENTIFIC," ")
unlist(str_split(observation_counts$SPECIES_SCIENTIFIC," "))
str_split(observation_counts$SPECIES_SCIENTIFIC," ")
View(observation_counts)
observation_counts$total <- sapply(observation_counts$SPECIES_SCIENTIFIC, function(x) length(unlist(strsplit(as.character(x), "\\W+"))))
View(observation_counts)
observation_counts %>%
filter(total<2)
sp = observation_counts %>%
filter(total<2)
View(groups)
View(sp)
sp$total == NULL
groups = rbind(groups,sp)
groups
sp
sp$total = NULL
groups = rbind(groups,sp)
rm(sp)
View(groups)
View(observation_counts)
# remove observations of less than 5
observation_counts = observation_counts %>%
filter(SPECIES_SCIENTIFIC != "0") %>%
filter(SPECIES_SCIENTIFIC != "UNKNOWN")%>%
filter(total>1)
#Â load target species
targets = readxl::read_xlsx("/Users/nfb/Dropbox/6-WILDOCEANS/wildoceans_specieslist.xlsx")
colnames(targets)[colnames(targets) == "Scientific name"] = "SPECIES_SCIENTIFIC"
targets$SPECIES_SCIENTIFIC = toupper(targets$SPECIES_SCIENTIFIC )
# join both datasets
observation_counts = left_join(observation_counts,targets)
# write sheet to use for keeping track of species groups not included
write.csv(groups, "/Users/nfb/Dropbox/6-WILDOCEANS/data_summary_excludedspeciesgroups.csv",row.names = FALSE)
# extract species names
sp = unique(observation_counts$SPECIES_SCIENTIFIC, ignore.case = TRUE)
ls = list() # empty list
for(i in sp){
# extract all data for one species
temp = summary3 %>%
filter(SPECIES_SCIENTIFIC == i) %>%
filter(!is.na(as.numeric(LONGITUDE))) %>%
filter(!is.na(as.numeric(LATITUDE)))
# save as R object to be used in modeling
saveRDS(temp,file = paste("/Users/nfb/Dropbox/6-WILDOCEANS/Modelling/speciesdata/",i, ".rds", sep=""))
# also save important information on that species
summary_temp = temp %>%
group_by(DATASET) %>%
arrange(DATE2) %>%
summarise(Start = as.Date(first(DATE2)), End = as.Date(last(DATE2)),datapoints = n())%>%
arrange(desc(datapoints))
write.csv(summary_temp,file =paste("/Users/nfb/Dropbox/6-WILDOCEANS/Modelling/speciesdata/",i,".csv",sep=""), row.names = FALSE)
}
library(sp)
library(dplyr)
library(raster)
library(stringr)
library(lubridate)
library(ggplot2)
library(rgeos)
library(rgdal)
library(dismo)
library(fuzzySim)
library(devtools)
library(mecofun)
library(rasterVis)
library(viridis)
library(readxl)
library(xlsx)
path =  "/Users/nfb/" # path for mac
setwd(paste0(path,"Dropbox/6-WILDOCEANS")) # set directory
# ---------------------------------
#  - SPECIES SPECIFIC MODEL PARAMETERS
# output: data frame with species names and modelling parameters (master)
# ---------------------------------
# read master file with species-specific modelling parameters
# i.e. restrict range modelled?, seasonal model?, include substrate? etc...
master = read_xlsx(list.files(pattern = "data_summary_master.xlsx", recursive = TRUE,full.names = TRUE))
alldata = list.files(path = paste0(path,"Dropbox/6-WILDOCEANS/Modelling/speciesdata"),pattern = ".rds",recursive = TRUE,full.names = TRUE, ignore.case = TRUE)
alldata = str_split(alldata, "/Users/nfb/Dropbox/6-WILDOCEANS/Modelling/speciesdata/", simplify = TRUE)[,2]
alldata = str_split(alldata, ".rds", simplify = TRUE)[,1]
alldata
# find species with data not in master sheet
excl = which(alldata %in% master$SPECIES_SCIENTIFIC == FALSE)
excl = as.data.frame(alldata[excl])
colnames(excl) = "SPECIES_SCIENTIFIC"
# add these species to master sheet
# this will also your raw maps to also include species you have data for
# but that are not in the master sheet for some reason
master = full_join(master,excl)
rm(excl)
# find species in master sheet but with no data
master = master %>%
filter((SPECIES_SCIENTIFIC %in% alldata))
count = 1 # count to fill lists during iterations
list_prevalence = list() # list of prevalence values 5km res
list_prevalence_10 = list() # list of prevalence values 10km res
list_abundance = list() # list of abundance values
list_cells = list() # list of cells values 5km res
list_cells_10 = list() # list of cells values 10km res
# each iteration looks at one species from the master sheet
for(i in 1:nrow(master)){
# template grid (5 and 10km resolution)
template = raster(list.files(pattern = "template_5km.tif", recursive = TRUE, full.names = TRUE))
template_10 = raster(list.files(pattern = "template_10km.tif", recursive = TRUE, full.names = TRUE))
# ---------------------------------
# - MODEL PARAMATERS
# output: species-specific model parameters
# ---------------------------------
target = master$SPECIES_SCIENTIFIC[i] # species name
folder = "speciesdata/" # for now all data is species only, the other folder if "generadata/"
substrate = master$Substrate[i] # inclusion of substrate layer?
# ---------------------------------
#  - SPECIES DATA
# outputs: occurrences (obs.data)
# ---------------------------------
source(list.files(pattern = "species_data.R", recursive = TRUE,full.names = TRUE)) # finds script in directory
rm(folder) # no longer needed
if(length(files)>0){ # proceed only if data was available for that species
# ---------------------------------
#  - SEASONALITY
# output: occurrence points are grouped by austral summer and winter
# ---------------------------------
source(list.files(pattern = "seasonality.R", recursive = TRUE, full.names = TRUE))
# ---------------------------------
#  - PREVALENCE
# output: calculate prevalence score for species data
# ---------------------------------
source(list.files(pattern = "Prevalence.R", recursive = TRUE,full.names = TRUE))
}
# fill empty lists with prevalence and abundance values
# if absent i.e. no data for species, then fill with 0 (prevents mismatches later on)
if(exists("perc")){
list_prevalence[[count]] = perc}else{
list_prevalence[[count]] = 0}
if(exists("perc_10")){
list_prevalence_10[[count]] = perc_10}else{
list_prevalence_10[[count]] = 0}
if(exists("abundance")){
list_abundance[[count]] = abundance}else{list_abundance[[count]] = 0}
if(exists("obscells")){
list_cells[[count]] = obscells}else{
list_cells[[count]] = 0}
if(exists("obscells_10")){
list_cells_10[[count]] = obscells_10}else{
list_cells_10[[count]] = 0}
count = count+1 # increase count
rm(perc, abundance,stack_subset,obscells) # clear for next species
}
# remove
rm(allcells,allcells_10,count,substrate,target,i,files,table,obs.data,obscells_10,perc_10)
# format number of occurrence points, cells with data and prevalence scores to a data frame
abundance = as.data.frame(unlist(list_abundance))
cells = as.data.frame(unlist(list_cells))
cells_10 = as.data.frame(unlist(list_cells_10))
prevalence = as.data.frame(unlist(list_prevalence))
prevalence_10 = as.data.frame(unlist(list_prevalence_10))
rm(list_abundance,list_prevalence, list_prevalence_10,list_cells,list_cells_10) # remove
# add species name to prevalence sheet
prevalence$SPECIES_SCIENTIFIC = master$SPECIES_SCIENTIFIC
# add abundance values to prevalence sheet
prevalence = cbind(prevalence,prevalence_10)
prevalence = cbind(prevalence,abundance)
prevalence = cbind(prevalence,cells)
prevalence = cbind(prevalence,cells_10)
rm(abundance,cells,cells_10,prevalence_10) # remove
# rename headers
names(prevalence)[1] = "prevalence"
names(prevalence)[3] = "prevalence_10"
names(prevalence)[4] = "abundance"
names(prevalence)[5] = "cells"
names(prevalence)[6] = "cells_10"
# round prevalence value to 1 integer
prevalence$rounded = round(prevalence$prevalence, digits = 0)
prevalence$rounded_10 = round(prevalence$prevalence_10, digits = 0)
# add prevalence and abundance data to master sheet
master$cells = NULL
master$cells_10= NULL
master$rounded= NULL
master$rounded_10= NULL
master$prevalence = NULL
master$prevalence_10 = NULL
master$abundance = NULL
master = left_join(master,prevalence)
# re-write master sheet
write.xlsx(as.data.frame(master),"data_summary_master.xlsx",row.names = FALSE)
# ---------------------------------
# PACKAGES
# ---------------------------------
library(spatial)
library(sf)
library(raster)
library(stringr)
library(dplyr)
library(readxl)
# ---------------------------------
# DIRECTORY
# ---------------------------------
#path =  "C:/Users/Administrator/"
path =  "/Users/nfb/"
setwd(paste0(path,"Dropbox/6-WILDOCEANS"))
# list of species
master = read_xlsx(list.files(pattern = "data_summary_master.xlsx", recursive = TRUE,full.names = TRUE))
# Occurrence files
files = list.files(pattern = ".rds", recursive = TRUE, path = paste0(path,"Dropbox/6-WILDOCEANS/Modelling/speciesdata/"),full.names = TRUE)
# EEZ polygon
eez = shapefile(list.files(pattern = "eez.shp", recursive = TRUE, full.names = TRUE))
# Expert extents
load(list.files(pattern = "points.RData", recursive = TRUE, full.names = TRUE))
expert_extent = points
colnames(expert_extent)[1] = "Scientific_name" # column name
expert_extent = as(expert_extent, Class = "Spatial")
expert_extent$Scientific_name = tolower(expert_extent$Scientific_name)
rm(points)
for(i in master$SPECIES_SCIENTIFIC){
# species data
target = i # species name
folder = "speciesdata/" # for now all data is species only, the other folder if "generadata/"
source(list.files(pattern = "species_data.R", recursive = TRUE)) # finds script in directory
rm(folder) # no longer needed
if(exists("obs.data")){
# remove duplicates
dups = duplicated(obs.data[c("LATITUDE","LONGITUDE", "DATE2")]) # verify duplicates (for latitude, longitude, and date)
obs.data = obs.data[!dups,] # remove duplicates from data
# geo-reference occurrences
if(nrow(obs.data)>0){
pts = SpatialPoints(obs.data[,c("LONGITUDE","LATITUDE")])}
}
# IUCN data
exists3 = file.info(list.files(pattern = paste(target,".gpkg",sep=""), recursive = TRUE, ignore.case = TRUE))
if(nrow(exists3 !=0)){iucn_extent = st_read(list.files(pattern = paste(target,".gpkg",sep=""), recursive = TRUE, ignore.case = TRUE))}
rm(exists3)
# extract data stats for that species
temp = master %>%
filter(SPECIES_SCIENTIFIC == i)
# plot and save each species as basic map
png(paste0(path,"Dropbox/6-WILDOCEANS/Modelling/Outputs/maps_raw/",target,".png",sep=""),width=3000, height=2000, res=300)
plot.new()
plot(eez, main = paste(target,"\n ",temp$`Common name`))
mtext(paste0("Data points = ",temp$abundance), adj = 0.8, padj = 40)
mtext(paste0("Cells with presence at 5km resolution = ",temp$cells," (",temp$rounded,"%)"), adj = 0.8, padj = 42)
mtext(paste0("Cells with presence at 10km resolution = ",temp$cells_10," (",temp$rounded_10,"%)"), adj = 0.8, padj = 44)
if(exists("iucn_extent")){plot(iucn_extent, add = TRUE, col = "blue")}
expert = expert_extent[expert_extent$Scientific_name == tolower(target),]
if(exists("pts")){points(pts, cex = 0.5, pch = 16, col = "red")}
if(exists("expert")){plot(expert, add = TRUE, col = "green", pch = 16)}
legend("topleft", legend=c("Data","IUCN range","Expert range"),
cex=1, fill = c("red", "blue",'green'))
dev.off()
rm(species,obs.data,expert,iucn_extent,pts)
}
library(sp)
library(dplyr)
library(raster)
library(stringr)
library(lubridate)
library(ggplot2)
library(sf)
library(rgeos)
library(rgdal)
library(dismo)
library(fuzzySim)
library(devtools)
library(mecofun)
library(rasterVis)
library(viridis)
library(readxl)
path =  "/Users/nfb/" # path for mac
setwd(paste0(path,"Dropbox/6-WILDOCEANS")) # set directory
# ---------------------------------
#  - SPECIES SPECIFIC MODEL PARAMETERS
# output: data frame with species names and modelling parameters (master)
# ---------------------------------
# read master file with species-specific modelling parameters
# i.e. restrict range modelled?, seasonal model?, include substrate? etc...
master = read_xlsx(list.files(pattern = "data_summary_master.xlsx", recursive = TRUE,full.names = TRUE))
# ---------------------------------
#  - PLOTTING LAYERS
# output: plotting layers for model projections (EEZ, coastal provinces, bathymetric contours)
# ---------------------------------
source(list.files(pattern = "plottingparameters.R", recursive = TRUE, full.names= TRUE))
# decide if you are running the 5km res or 10km res
res = 10
if(res == 5){
# load appropriate template
template = raster(list.files(pattern = "template_5km.tif", recursive = TRUE, full.names = TRUE))
# species with prevalence >1
master_keep = master %>%
filter(rounded >=1)
# number of background points (n_bckg_pts) to use
# code to figure out 20% of cells: 0.2*length(which(values(template)==1))
n_bckg_pts = 8410}
if(res == 10){
# load appropriate template
template = raster(list.files(pattern = "template_10km.tif", recursive = TRUE, full.names = TRUE))
# species with prevalence >1
master_keep = master %>%
filter(rounded_10>=1)
# number of background points (n_bckg_pts) to use
# code to figure out 20% of cells: 0.2*length(which(values(template)==1))
n_bckg_pts = 2162}
# ---------------------------------
#  - ENVIRONMENTAL VARIABLES
# output: a predictor variable stack (stack)
# ---------------------------------
source(list.files(pattern = "envnt_variable_stack.R", recursive = TRUE, full.names = TRUE))
# check what species have updated data on
updated_data = read.csv(list.files(pattern = "list", recursive = TRUE, full.names = TRUE))
list.files(pattern = "list", recursive = TRUE, full.names = TRUE)
# check what species have updated data on
updated_data = read.csv(list.files(pattern = "updatedspplist", recursive = TRUE, full.names = TRUE))
View(updated_data)
updated_data$Species_scientific
master_keep$SPECIES_SCIENTIFIC
updated_data$Species_scientific
master_keep$SPECIES_SCIENTIFIC %in% updated_data$Species_scientific
master_keep$SPECIES_SCIENTIFIC
updated_data$Species_scientific
updated_data$Species_scientific = toupper(updated_data$Species_scientific)
master_keep$SPECIES_SCIENTIFIC %in% updated_data$Species_scientific
master_keep$SPECIES_SCIENTIFIC[master_keep$SPECIES_SCIENTIFIC %in% updated_data$Species_scientific,]
master_keep$SPECIES_SCIENTIFIC[(master_keep$SPECIES_SCIENTIFIC %in% updated_data$Species_scientific),]
master_keep$SPECIES_SCIENTIFIC[,master_keep$SPECIES_SCIENTIFIC %in% updated_data$Species_scientific)]
master_keep$SPECIES_SCIENTIFIC[,master_keep$SPECIES_SCIENTIFIC %in% updated_data$Species_scientific]
master_keep$SPECIES_SCIENTIFIC[master_keep$SPECIES_SCIENTIFIC %in% updated_data$Species_scientific]
master_keep[master_keep$SPECIES_SCIENTIFIC %in% updated_data$Species_scientific]
master_keep[master_keep$SPECIES_SCIENTIFIC %in% updated_data$Species_scientific,]
master_keep = master_keep[master_keep$SPECIES_SCIENTIFIC %in% updated_data$Species_scientific,]
View(master_keep)
View(updated_data)
