# MODEL PARAMATERS
target = master_keep$SPECIES_SCIENTIFIC[i] # species name
substrate = master_keep$Substrate[i] # specifies if substrate layer is to be included
seasonal = "no"
#seasonal = master_keep$Seasonality[i] # specifies if seasonal (summer & winter) models are too also be run
# OCCURRENCE DATA
source(list.files(pattern = "species_data.R", recursive = TRUE, full.names = TRUE))
# SAMPLING BIAS
source(list.files(pattern = "subsampling.R", recursive = TRUE, full.names = TRUE))
# BACKGROUND SAMPLE
source(list.files(pattern ="pseudoabsence.R", recursive = TRUE, full.names = TRUE))
# BIOMOD OBJECT CREATION
source(list.files(pattern = "Biomod.R", recursive = TRUE, full.names = TRUE))
# ASEASONAL MODEL RUNS AND PROJECTIONS
model_type = "Aseasonal" # specify model_type
data = biomod_obj # specify which biomod_obj
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])
# SEASONAL MODEL RUNS AND PROJECTIONS
if(seasonal == "yes"){
model_type = "summer"
season = 1
data = biomod_obj_seasons[[season]]
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])
model_type = "winter"
season = 2
data = biomod_obj_seasons[[season]]
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])}
rm(stack_new)}
# isolate ensemble prediction raster
en_preds = get_predictions(static_ensembleprojection)
en_preds = calc(en_preds,mean,na.rm = TRUE)
# PLOT 1 - CONTINUOUS DISTRIBUTION VALUES (pretty plots)
# this is the plot to use in any reports or papers
temp = en_preds # temporary layer to turn 0 values to NA
temp[values(temp) == 0] = NA # turn 0 values to NA
# PLOT 1 - CONTINUOUS DISTRIBUTION VALUES (pretty plots)
# this is the plot to use in any reports or papers
temp = en_preds # temporary layer to turn 0 values to NA
temp[values(temp) == 0] = NA # turn 0 values to NA
# save raster
writeRaster(temp,paste0(rasterfolder,target,"_",model_type,"_res",res,"_ensemblemean.tiff"), overwrite = TRUE)
# PLOT 2 - BINARY DISTRIBUTION VALUES
temp = en_preds # temporary layer to turn values below the threshold to NA
values(temp)[values(temp)<thresh$thresh]=NA # turn values below threshold to NA
values(temp)[values(temp)>=thresh$thresh]=1 # turn values below threshold to NA
plot = levelplot(temp,
main = paste0(target,"\n",model_type,"\n","Binary presence absence map"),
names.attr=c("Ensemble model"),
margin = FALSE,
colorkey=FALSE)+
latticeExtra::layer(sp.polygons(eez,col = "black"))
# this saves the plot to a folder
png(file=paste0(plotfolder,target,"_",model_type,"_res",res,"_binary_ensemble.png"), width=3000, height=3000, res=300)
print(plot)
dev.off()
rm(plot) # remove unnecessary variables
# PLOT 3, 4 and 5 - PLANNING SOFTWARE PLOTS
# these are the plots to use in the planning software
# they are simple rasters with probability values from 0 to 1000
# both plots (ensemble mean and ensemble coefficient of variation) are saved directly to a folder
#writeRaster(en_preds[[2]],paste0(path,"Dropbox/6-WILDOCEANS/Modelling/Outputs/sdms/",target,"_",model_type,"ensemblecv.tiff"),  overwrite = TRUE)
writeRaster(temp,paste0(rasterfolder,target,"_",model_type,"_res",res,"_ensemblemeanthreshold.tiff"),  overwrite = TRUE)
# IMPORTANT: to simply run the loop with the example data
# go to the species_data.R subscript and follow the instructions in the subscript
# also remember to manually change the following to:
# target = "ACROTERIOBATUS ANNULATUS
# substrate = "yes"
# seasonal = "yes" or "no" (your choice on if you want to run seasonal models as well)
for(i in 12:nrow(master_keep)){
# MODEL PARAMATERS
target = master_keep$SPECIES_SCIENTIFIC[i] # species name
substrate = master_keep$Substrate[i] # specifies if substrate layer is to be included
seasonal = "no"
#seasonal = master_keep$Seasonality[i] # specifies if seasonal (summer & winter) models are too also be run
# OCCURRENCE DATA
source(list.files(pattern = "species_data.R", recursive = TRUE, full.names = TRUE))
# SAMPLING BIAS
source(list.files(pattern = "subsampling.R", recursive = TRUE, full.names = TRUE))
# BACKGROUND SAMPLE
source(list.files(pattern ="pseudoabsence.R", recursive = TRUE, full.names = TRUE))
# BIOMOD OBJECT CREATION
source(list.files(pattern = "Biomod.R", recursive = TRUE, full.names = TRUE))
# ASEASONAL MODEL RUNS AND PROJECTIONS
model_type = "Aseasonal" # specify model_type
data = biomod_obj # specify which biomod_obj
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])
# SEASONAL MODEL RUNS AND PROJECTIONS
if(seasonal == "yes"){
model_type = "summer"
season = 1
data = biomod_obj_seasons[[season]]
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])
model_type = "winter"
season = 2
data = biomod_obj_seasons[[season]]
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])}
rm(stack_new)}
warnings()
View(stack_subset)
View(master_keep)
# IMPORTANT: to simply run the loop with the example data
# go to the species_data.R subscript and follow the instructions in the subscript
# also remember to manually change the following to:
# target = "ACROTERIOBATUS ANNULATUS
# substrate = "yes"
# seasonal = "yes" or "no" (your choice on if you want to run seasonal models as well)
for(i in 15:nrow(master_keep)){
# MODEL PARAMATERS
target = master_keep$SPECIES_SCIENTIFIC[i] # species name
substrate = master_keep$Substrate[i] # specifies if substrate layer is to be included
seasonal = "no"
#seasonal = master_keep$Seasonality[i] # specifies if seasonal (summer & winter) models are too also be run
# OCCURRENCE DATA
source(list.files(pattern = "species_data.R", recursive = TRUE, full.names = TRUE))
# SAMPLING BIAS
source(list.files(pattern = "subsampling.R", recursive = TRUE, full.names = TRUE))
# BACKGROUND SAMPLE
source(list.files(pattern ="pseudoabsence.R", recursive = TRUE, full.names = TRUE))
# BIOMOD OBJECT CREATION
source(list.files(pattern = "Biomod.R", recursive = TRUE, full.names = TRUE))
# ASEASONAL MODEL RUNS AND PROJECTIONS
model_type = "Aseasonal" # specify model_type
data = biomod_obj # specify which biomod_obj
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])
# SEASONAL MODEL RUNS AND PROJECTIONS
if(seasonal == "yes"){
model_type = "summer"
season = 1
data = biomod_obj_seasons[[season]]
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])
model_type = "winter"
season = 2
data = biomod_obj_seasons[[season]]
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])}
rm(stack_new)}
library(devtools)
devtools::install_github("biomod/biomod2",dependencies=TRUE)
devtools::install_github("biomodhub/biomod2",dependencies=TRUE)
devtools::install_github("biomodhub/biomod2",dependencies=TRUE)
detach("package:biomod2", unload = TRUE)
library(biomod2)
i=22
# MODEL PARAMATERS
target = master_keep$SPECIES_SCIENTIFIC[i] # species name
substrate = master_keep$Substrate[i] # specifies if substrate layer is to be included
seasonal = "no"
# OCCURRENCE DATA
source(list.files(pattern = "species_data.R", recursive = TRUE, full.names = TRUE))
# SAMPLING BIAS
source(list.files(pattern = "subsampling.R", recursive = TRUE, full.names = TRUE))
# BACKGROUND SAMPLE
source(list.files(pattern ="pseudoabsence.R", recursive = TRUE, full.names = TRUE))
library(biomod2)
# this allows you to see the default model parameters used by biomod
Print_Default_ModelingOptions() # these are the default parameters used for each model
# this allows you to see the default model parameters used by biomod
bm_Default_ModelingOptions() # these are the default parameters used for each model
# this allows you to see the default model parameters used by biomod
bm_DefaultModelingOptions() # these are the default parameters used for each model
# default parameters can be altered using BIOMOD_ModelingOptions()
# in our case we will be using MAXENT so i need to specify the path to my downloaded MAXENT file
# i also want to specify the use of a polynomial GLM
mxtPh = BIOMOD_ModelingOptions(MAXENT = list(path_to_maxent.jar = paste0(my.directory,"/maxent")),
GLM = list(type = 'polynomial'))
# remove NAs
pts_env = na.omit(pts_env)
# isolate presence/background points column of 1s and 0s
pa = pts_env$pa
# convert 0 to NAs
# this is important as it means they ar eseen as background points and not true absences
pa[which(pa == 0)] = NA
# isolate presence/background points coordinates
pa_xy = pts_env[,c(2,3)]
# isolate environmental variables columns (from column 4 onwards)
exp =  pts_env[,-c(1:3)]
# from all your generated background points in the pseudo-absence script
# pick the same number as your number of presence points
# this is because for each model run we chose to have the same number of presences as number of background points
# and we run each model with 2 sets of background points (specified by PA.nb.rep = 2)
pseudoabsences = length(which(pa==1))
# make sure substrate is a factor
exp$substrate_simplified = as.factor(exp$substrate_simplified)
# keep or remove substrate layer
if(!is.na(substrate) & substrate == "no"){
stack_model = dropLayer(stack_subset,"substrate_simplified")
exp$substrate_simplified = NULL}else{stack_model = stack_subset}
# biomod object
biomod_obj =  BIOMOD_FormatingData(resp.var = pa, # presence/background data
expl.var = exp, # environmental variables
resp.xy = pa_xy, # response variable coordinates
resp.name = target, # species name
# this will pick the pseudo-absences from your NAs in pa
PA.nb.absences = pseudoabsences,
# two sets of pseudoabsences to be chosen
PA.nb.rep = 2,
# for high specificity pseudo-absences should be randomly selected
PA.strategy = 'random')
# ASEASONAL MODEL RUNS AND PROJECTIONS
model_type = "Aseasonal" # specify model_type
data = biomod_obj # specify which biomod_obj
library(doParallel)
cl = makeCluster(8)
doParallel::registerDoParallel(cl)
# Build individual aseasonal models
# this static models object will contain 60 model projections
# this is because we are running 3 model algorithms (GLM, MAXENT, GAM)
# each model algorithm is being run 10 times as a cross-validation approach
# and these 10 runs are being run on two different set sof backgorund points
# 3 * 10 * 2 = 60
static_models <- BIOMOD_Modeling(
data, # your biomod object
VarImport = 5,
#models = c('GLM'), # one model for demonstration purposes
models = c('GAM','GLM','MAXENT.Phillips'), # 3 modelling algorithms run for project
models.options = mxtPh, # modified model parameters, unnecessary if you are happy with default biomod2 parameters
#NbRunEval = 1, # 1-fold cross validation for demonstration purposes
NbRunEval = 10, # 10-fold cross validation (number of evaluations to run)
DataSplit = 75, # 75% of data used for calibration, 25% for testing
models.eval.meth = c('TSS'), # evaluation method, TSS is True Statistics Skill
SaveObj = TRUE, # keep all results on hard drive
rescal.all.models = FALSE, # if true, all model prediction will be scaled with a binomial GLM
modeling.id = target,
nb.cpu = 8) # name of model = species name (target)
# Build individual aseasonal models
# this static models object will contain 60 model projections
# this is because we are running 3 model algorithms (GLM, MAXENT, GAM)
# each model algorithm is being run 10 times as a cross-validation approach
# and these 10 runs are being run on two different set sof backgorund points
# 3 * 10 * 2 = 60
static_models <- BIOMOD_Modeling(
data, # your biomod object
var.import = 5,
#models = c('GLM'), # one model for demonstration purposes
models = c('GAM','GLM','MAXENT.Phillips'), # 3 modelling algorithms run for project
bm.options  = mxtPh, # modified model parameters, unnecessary if you are happy with default biomod2 parameters
#NbRunEval = 1, # 1-fold cross validation for demonstration purposes
NbRunEval = 10, # 10-fold cross validation (number of evaluations to run)
data.split.perc = 75, # 75% of data used for calibration, 25% for testing
metric.eval  = c('TSS'), # evaluation method, TSS is True Statistics Skill
SaveObj = TRUE, # keep all results on hard drive
rescal.all.models = FALSE, # if true, all model prediction will be scaled with a binomial GLM
modeling.id = target,
nb.cpu = 8) # name of model = species name (target)
# Build individual aseasonal models
# this static models object will contain 60 model projections
# this is because we are running 3 model algorithms (GLM, MAXENT, GAM)
# each model algorithm is being run 10 times as a cross-validation approach
# and these 10 runs are being run on two different set sof backgorund points
# 3 * 10 * 2 = 60
static_models <- BIOMOD_Modeling(
data, # your biomod object
var.import = 5,
#models = c('GLM'), # one model for demonstration purposes
models = c('GAM','GLM','MAXENT.Phillips'), # 3 modelling algorithms run for project
bm.options  = mxtPh, # modified model parameters, unnecessary if you are happy with default biomod2 parameters
#NbRunEval = 1, # 1-fold cross validation for demonstration purposes
nb.rep = 10, # 10-fold cross validation (number of evaluations to run)
data.split.perc = 75, # 75% of data used for calibration, 25% for testing
metric.eval  = c('TSS'), # evaluation method, TSS is True Statistics Skill
SaveObj = TRUE, # keep all results on hard drive
rescal.all.models = FALSE, # if true, all model prediction will be scaled with a binomial GLM
modeling.id = target,
nb.cpu = 8) # name of model = species name (target)
BIOMOD_Modeling
?BIOMOD_Modeling
# Build individual aseasonal models
# this static models object will contain 60 model projections
# this is because we are running 3 model algorithms (GLM, MAXENT, GAM)
# each model algorithm is being run 10 times as a cross-validation approach
# and these 10 runs are being run on two different set sof backgorund points
# 3 * 10 * 2 = 60
static_models <- BIOMOD_Modeling(
data, # your biomod object
var.import = 5,
#models = c('GLM'), # one model for demonstration purposes
models = c('GAM','GLM','MAXENT.Phillips'), # 3 modelling algorithms run for project
bm.options  = mxtPh, # modified model parameters, unnecessary if you are happy with default biomod2 parameters
#NbRunEval = 1, # 1-fold cross validation for demonstration purposes
nb.rep = 10, # 10-fold cross validation (number of evaluations to run)
data.split.perc = 75, # 75% of data used for calibration, 25% for testing
metric.eval  = c('TSS'), # evaluation method, TSS is True Statistics Skill
save.output  = TRUE, # keep all results on hard drive
rescal.all.models = FALSE, # if true, all model prediction will be scaled with a binomial GLM
modeling.id = target,
nb.cpu = 8) # name of model = species name (target)
# Build individual aseasonal models
# this static models object will contain 60 model projections
# this is because we are running 3 model algorithms (GLM, MAXENT, GAM)
# each model algorithm is being run 10 times as a cross-validation approach
# and these 10 runs are being run on two different set sof backgorund points
# 3 * 10 * 2 = 60
static_models <- BIOMOD_Modeling(
data, # your biomod object
var.import = 5,
#models = c('GLM'), # one model for demonstration purposes
models = c('GAM','GLM','MAXENT.Phillips'), # 3 modelling algorithms run for project
bm.options  = mxtPh, # modified model parameters, unnecessary if you are happy with default biomod2 parameters
#NbRunEval = 1, # 1-fold cross validation for demonstration purposes
nb.rep = 10, # 10-fold cross validation (number of evaluations to run)
data.split.perc = 75, # 75% of data used for calibration, 25% for testing
metric.eval  = c('TSS'), # evaluation method, TSS is True Statistics Skill
save.output  = TRUE, # keep all results on hard drive
scale.models = FALSE, # if true, all model prediction will be scaled with a binomial GLM
modeling.id = target,
nb.cpu = 8) # name of model = species name (target)
# Build individual aseasonal models
# this static models object will contain 60 model projections
# this is because we are running 3 model algorithms (GLM, MAXENT, GAM)
# each model algorithm is being run 10 times as a cross-validation approach
# and these 10 runs are being run on two different set sof backgorund points
# 3 * 10 * 2 = 60
static_models <- BIOMOD_Modeling(
data, # your biomod object
var.import = 5,
#models = c('GLM'), # one model for demonstration purposes
models = c('GAM','GLM','MAXENT.Phillips'), # 3 modelling algorithms run for project
bm.options  = mxtPh, # modified model parameters, unnecessary if you are happy with default biomod2 parameters
#NbRunEval = 1, # 1-fold cross validation for demonstration purposes
nb.rep = 1, # 10-fold cross validation (number of evaluations to run)
data.split.perc = 75, # 75% of data used for calibration, 25% for testing
metric.eval  = c('TSS'), # evaluation method, TSS is True Statistics Skill
save.output  = TRUE, # keep all results on hard drive
scale.models = FALSE, # if true, all model prediction will be scaled with a binomial GLM
modeling.id = target,
nb.cpu = 8) # name of model = species name (target)
# get important variables
variables = as.data.frame(get_variables_importance(static_models))
# save
write.csv(variables,paste0(evaluationfolder,model_type,target,"_res",res,"_variableimportance.csv"), row.names = FALSE)
# Build ensemble model
static_ensemblemodel  <- BIOMOD_EnsembleModeling(
bm.mod  = static_models, # all model projections
models.chosen = 'all', # use all your models
em.by='PA_dataset+repet', # the way the models will be combined to build the ensemble models.
eval.metric = 'TSS', # which metric to use to keep models for the ensemble (requires the threshold below)
eval.metric.quality.threshold = c(0.7), # only keep models with a TSS score >0.7
prob.mean = T, #  Estimate the mean probabilities across predictions
prob.cv = T, # Estimate the coefficient of variation across predictions
)
# Build ensemble model
static_ensemblemodel  <- BIOMOD_EnsembleModeling(
bm.mod  = static_models, # all model projections
models.chosen = 'all', # use all your models
em.by='PA_dataset+repet', # the way the models will be combined to build the ensemble models.
metric.select  = 'TSS', # which metric to use to keep models for the ensemble (requires the threshold below)
metric.select.thresh  = c(0.7), # only keep models with a TSS score >0.7
prob.mean = T, #  Estimate the mean probabilities across predictions
prob.cv = T, # Estimate the coefficient of variation across predictions
)
?BIOMOD_Projection
# Individual model projections over current environmental variables
static_modelprojections =
BIOMOD_Projection(
proj.name = paste0(target,model_type), # new folder will be created with this name
bm.mod  = static_models, # your modelling output object
new.env = stack_model, # same environmental variables on which model will be projected
models.chosen  = "all", # which models to project, in this case only the full ones
compress = 'xy', # to do with how r stores the file
build.clamping.mask = FALSE,
nb.cpu=8)
detach("package:raster", unload = TRUE)
library(raster)
detach("package:raster", unload = TRUE)
library(raster)
# Individual model projections over current environmental variables
static_modelprojections =
BIOMOD_Projection(
proj.name = paste0(target,model_type), # new folder will be created with this name
bm.mod  = static_models, # your modelling output object
new.env = stack_model, # same environmental variables on which model will be projected
models.chosen  = "all", # which models to project, in this case only the full ones
compress = 'xy', # to do with how r stores the file
build.clamping.mask = FALSE,
nb.cpu=8)
# ---------------------------------
# PACKAGES
# ---------------------------------
# list of required packages
requiredpackages = c("devtools","readxl","viridis","devtools","fuzzySim","dismo","rgdal","rgeos","sf","rasterVis","ggplot2","mecofun","raster","stringr","readxl", "raster", "sp", "dplyr", "lubridate")
# load packages
lapply(requiredpackages,require, character.only = TRUE)
devtools::install_github("biomodhub/biomod2", dependencies = TRUE)
# ---------------------------------
# DEFINE WORKING DIRECTORY
# ---------------------------------
# set directory to same parent folder where sub-scripts are found
# the subs-scripts can be in folders within this directory as the code will look through all the folders
my.directory = getwd()
# set directory
setwd(my.directory)
# ---------------------------------
#  PLOTTING LAYERS
# this subscript prepares layers required for plotting and sets plotting parameters i.e. colour etc..
# ---------------------------------
source(list.files(pattern = "plottingparameters.R", recursive = TRUE, full.names= TRUE))
# ---------------------------------
#  - ENVIRONMENTAL VARIABLES
# ---------------------------------
# specify model resolution
# we chose between a grid of 5 x 5 km (res = 5) or 10 x 10 km (res = 10)
res = 10
source(list.files(pattern = "envnt_variable_stack.R", recursive = TRUE, full.names = TRUE))
# ---------------------------------
#  SPECIES SPECIFIC MODEL PARAMETERS
# ---------------------------------
# read master file with species-specific modelling parameters
# this sheet contains a list of all species with some additional data details
master = read_xlsx(list.files(pattern = "data_summary_master.xlsx", recursive = TRUE,full.names = TRUE))
# filter master sheet to keep species with a minimum prevalence of 1
# the prevalence value indicates how much data there is for this species relative to entire modeling surface
# i.e. it is the percentage of cells with data out of total cells, so the lower your resolution, the higher the prevalence
if(res == 5){
master_keep = master %>%
filter(rounded >=1)}
if(res ==10){
master_keep = master %>%
filter(rounded_10 >=1)}
# IMPORTANT: to simply run the loop with the example data
# go to the species_data.R subscript and follow the instructions in the subscript
master_keep_reduced = master_keep %>%
filter(cells_10>100)
for(i in 2:6){
# MODEL PARAMATERS
target = master_keep_reduced$SPECIES_SCIENTIFIC[i] # species name
substrate = master_keep_reduced$Substrate[i] # specifies if substrate layer is to be included
seasonal = "no"
#seasonal = master_keep$Seasonality[i] # specifies if seasonal (summer & winter) models are too also be run
# OCCURRENCE DATA
source(list.files(pattern = "species_data.R", recursive = TRUE, full.names = TRUE))
# SAMPLING BIAS
source(list.files(pattern = "subsampling.R", recursive = TRUE, full.names = TRUE))
# BACKGROUND SAMPLE
source(list.files(pattern ="pseudoabsence.R", recursive = TRUE, full.names = TRUE))
# BIOMOD OBJECT CREATION
source(list.files(pattern = "Biomod.R", recursive = TRUE, full.names = TRUE))
# ASEASONAL MODEL RUNS AND PROJECTIONS
model_type = "Aseasonal" # specify model_type
data = biomod_obj # specify which biomod_obj
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])
# SEASONAL MODEL RUNS AND PROJECTIONS
if(seasonal == "yes"){
model_type = "summer"
season = 1
data = biomod_obj_seasons[[season]]
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])
model_type = "winter"
season = 2
data = biomod_obj_seasons[[season]]
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])}
rm(stack_new)}
15:7
for(i in 15:7){
# MODEL PARAMATERS
target = master_keep_reduced$SPECIES_SCIENTIFIC[i] # species name
substrate = master_keep_reduced$Substrate[i] # specifies if substrate layer is to be included
seasonal = "no"
#seasonal = master_keep$Seasonality[i] # specifies if seasonal (summer & winter) models are too also be run
# OCCURRENCE DATA
source(list.files(pattern = "species_data.R", recursive = TRUE, full.names = TRUE))
# SAMPLING BIAS
source(list.files(pattern = "subsampling.R", recursive = TRUE, full.names = TRUE))
# BACKGROUND SAMPLE
source(list.files(pattern ="pseudoabsence.R", recursive = TRUE, full.names = TRUE))
# BIOMOD OBJECT CREATION
source(list.files(pattern = "Biomod.R", recursive = TRUE, full.names = TRUE))
# ASEASONAL MODEL RUNS AND PROJECTIONS
model_type = "Aseasonal" # specify model_type
data = biomod_obj # specify which biomod_obj
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])
# SEASONAL MODEL RUNS AND PROJECTIONS
if(seasonal == "yes"){
model_type = "summer"
season = 1
data = biomod_obj_seasons[[season]]
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])
model_type = "winter"
season = 2
data = biomod_obj_seasons[[season]]
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])}
rm(stack_new)}
View(master_keep)
View(master_keep)
View(master_keep_reduced)
for(i in 15:7){
# MODEL PARAMATERS
target = master_keep_reduced$SPECIES_SCIENTIFIC[i] # species name
substrate = master_keep_reduced$Substrate[i] # specifies if substrate layer is to be included
seasonal = "no"
#seasonal = master_keep$Seasonality[i] # specifies if seasonal (summer & winter) models are too also be run
# OCCURRENCE DATA
source(list.files(pattern = "species_data.R", recursive = TRUE, full.names = TRUE))
# SAMPLING BIAS
source(list.files(pattern = "subsampling.R", recursive = TRUE, full.names = TRUE))
# BACKGROUND SAMPLE
source(list.files(pattern ="pseudoabsence.R", recursive = TRUE, full.names = TRUE))
# BIOMOD OBJECT CREATION
source(list.files(pattern = "Biomod.R", recursive = TRUE, full.names = TRUE))
# ASEASONAL MODEL RUNS AND PROJECTIONS
model_type = "Aseasonal" # specify model_type
data = biomod_obj # specify which biomod_obj
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])
# SEASONAL MODEL RUNS AND PROJECTIONS
if(seasonal == "yes"){
model_type = "summer"
season = 1
data = biomod_obj_seasons[[season]]
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])
model_type = "winter"
season = 2
data = biomod_obj_seasons[[season]]
source(list.files(pattern = "modelling.R", recursive = TRUE, full.names = TRUE)[3])}
rm(stack_new)}
