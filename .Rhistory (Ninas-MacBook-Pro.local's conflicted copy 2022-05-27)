sdm_mpaoverlay[which(sdm_mpaoverlay[,1]>0),1] = 1
sdm_mpaoverlay
# get status and endemism of species
master_temp = master %>%
filter(SPECIES_SCIENTIFIC %in% str_replace(names(sdms_thresholds[[i]]),"\\."," ") )
status_temp = master_temp$STATUS
end_temp = master_temp$ENDEMIC.STATUS
# add empty columns to fill with status and endemism total per MPA
sdm_mpaoverlay$status_sum = 0
sdm_mpaoverlay$endemism_sum = 0
sdm_mpaoverlay
# run a loop to extract which mpas each species was found in
sdm_mpaoverlay = data.frame(1:38) # empty data frame to fill from loop
# add empty columns to fill with status and endemism total per MPA
sdm_mpaoverlay$status_sum_CR = 0
sdm_mpaoverlay$status_sum_EN = 0
sdm_mpaoverlay$status_sum_VU = 0
sdm_mpaoverlay$endemism_sum_1 = 0
sdm_mpaoverlay$endemism_sum_2 = 0
sdm_mpaoverlay$endemism_sum_0 = 0
# remove skeleton column
sdm_mpaoverlay$X1.38 = NULL
sdm_mpaoverlay
status_temp
# add to appropriate column
str_detect(status_temp,colnames(sdm_mpaoverlay))
status_temp
colnames(sdm_mpaoverlay)
# add to appropriate column
pattern_detect(status_temp,colnames(sdm_mpaoverlay))
# add to appropriate column
str_detect(colnames(sdm_mpaoverlay),status_temp)
# add to appropriate column
sdm_mpaoverlay[,str_detect(colnames(sdm_mpaoverlay),status_temp)]
# add to appropriate column
sdm_mpaoverlay[,str_detect(colnames(sdm_mpaoverlay),status_temp)] = sdm_mpaoverlay[,str_detect(colnames(sdm_mpaoverlay),status_temp)]+1
sdm_mpaoverlay
sdm_mpaoverlay[,str_detect(colnames(sdm_mpaoverlay),end_temp)] = sdm_mpaoverlay[,str_detect(colnames(sdm_mpaoverlay),end_temp)]+1
sdm_mpaoverlay
# run loop for each species distribution
for(i in 1:nlayers(sdms_thresholds)){
# extract presence of each species per mpa
spp_temp = extract(sdms_thresholds[[i]],mpas,fun = mean,na.rm=TRUE)
# convert values to dataframe
spp_temp  = as.data.frame(spp_temp)
# add each dataframe to main dataframe
sdm_mpaoverlay = cbind(spp_temp,sdm_mpaoverlay)
# convert any non 0 value to 1 to indicate presence
sdm_mpaoverlay[which(sdm_mpaoverlay[,1]>0),1] = 1
# get status and endemism of species
master_temp = master %>%
filter(SPECIES_SCIENTIFIC %in% str_replace(names(sdms_thresholds[[i]]),"\\."," ") )
status_temp = master_temp$STATUS
end_temp = master_temp$ENDEMIC.STATUS
# add 1 to appropriate column
sdm_mpaoverlay[,str_detect(colnames(sdm_mpaoverlay),status_temp)] = sdm_mpaoverlay[,str_detect(colnames(sdm_mpaoverlay),status_temp)]+1
sdm_mpaoverlay[,str_detect(colnames(sdm_mpaoverlay),end_temp)] = sdm_mpaoverlay[,str_detect(colnames(sdm_mpaoverlay),end_temp)]+1
}
View(sdm_mpaoverlay)
i=1
# run a loop to extract which mpas each species was found in
sdm_mpaoverlay = data.frame(1:38) # empty data frame to fill from loop
# add empty columns to fill with status and endemism total per MPA
sdm_mpaoverlay$status_sum_CR = 0
sdm_mpaoverlay$status_sum_EN = 0
sdm_mpaoverlay$status_sum_VU = 0
sdm_mpaoverlay$endemism_sum_1 = 0
sdm_mpaoverlay$endemism_sum_2 = 0
sdm_mpaoverlay$endemism_sum_0 = 0
# remove skeleton column
sdm_mpaoverlay$X1.38 = NULL
# extract presence of each species per mpa
spp_temp = extract(sdms_thresholds[[i]],mpas,fun = mean,na.rm=TRUE)
# add each dataframe to main dataframe
sdm_mpaoverlay = cbind(spp_temp,sdm_mpaoverlay)
# convert values to dataframe
spp_temp  = as.data.frame(spp_temp)
# convert any non 0 value to 1 to indicate presence
sdm_mpaoverlay[which(sdm_mpaoverlay[,1]>0),1] = 1
# get status and endemism of species
master_temp = master %>%
filter(SPECIES_SCIENTIFIC %in% str_replace(names(sdms_thresholds[[i]]),"\\."," ") )
status_temp = master_temp$STATUS
end_temp = master_temp$ENDEMIC.STATUS
sdm_mpaoverlay
which(sdm_mpaoverlay[,1]>0)
# add 1 to appropriate column (but only for MPAs where species was found )
sdm_mpaoverlay[which(sdm_mpaoverlay[,1]>0),str_detect(colnames(sdm_mpaoverlay),status_temp)] = sdm_mpaoverlay[,str_detect(colnames(sdm_mpaoverlay),status_temp)]+1
sdm_mpaoverlay[which(sdm_mpaoverlay[,1]>0),str_detect(colnames(sdm_mpaoverlay),end_temp)] = sdm_mpaoverlay[,str_detect(colnames(sdm_mpaoverlay),end_temp)]+1
# add 1 to appropriate column (but only for MPAs where species was found )
sdm_mpaoverlay[which(sdm_mpaoverlay[,1]>0),str_detect(colnames(sdm_mpaoverlay),status_temp)] = sdm_mpaoverlay[which(sdm_mpaoverlay[,1]>0),str_detect(colnames(sdm_mpaoverlay),status_temp)]+1
sdm_mpaoverlay[which(sdm_mpaoverlay[,1]>0),str_detect(colnames(sdm_mpaoverlay),end_temp)] = sdm_mpaoverlay[which(sdm_mpaoverlay[,1]>0),str_detect(colnames(sdm_mpaoverlay),end_temp)]+1
sdm_mpaoverlay
# run a loop to extract which mpas each species was found in
sdm_mpaoverlay = data.frame(1:38) # empty data frame to fill from loop
# add empty columns to fill with status and endemism total per MPA
sdm_mpaoverlay$status_sum_CR = 0
sdm_mpaoverlay$status_sum_EN = 0
sdm_mpaoverlay$status_sum_VU = 0
sdm_mpaoverlay$endemism_sum_1 = 0
sdm_mpaoverlay$endemism_sum_2 = 0
sdm_mpaoverlay$endemism_sum_0 = 0
# remove skeleton column
sdm_mpaoverlay$X1.38 = NULL
# run loop for each species distribution
for(i in 1:nlayers(sdms_thresholds)){
# extract presence of each species per mpa
spp_temp = extract(sdms_thresholds[[i]],mpas,fun = mean,na.rm=TRUE)
# convert values to dataframe
spp_temp  = as.data.frame(spp_temp)
# add each dataframe to main dataframe
sdm_mpaoverlay = cbind(spp_temp,sdm_mpaoverlay)
# convert any non 0 value to 1 to indicate presence
sdm_mpaoverlay[which(sdm_mpaoverlay[,1]>0),1] = 1
# get status and endemism of species
master_temp = master %>%
filter(SPECIES_SCIENTIFIC %in% str_replace(names(sdms_thresholds[[i]]),"\\."," ") )
status_temp = master_temp$STATUS
end_temp = master_temp$ENDEMIC.STATUS
# add 1 to appropriate column (but only for MPAs where species was found )
sdm_mpaoverlay[which(sdm_mpaoverlay[,1]>0),str_detect(colnames(sdm_mpaoverlay),status_temp)] = sdm_mpaoverlay[which(sdm_mpaoverlay[,1]>0),str_detect(colnames(sdm_mpaoverlay),status_temp)]+1
sdm_mpaoverlay[which(sdm_mpaoverlay[,1]>0),str_detect(colnames(sdm_mpaoverlay),end_temp)] = sdm_mpaoverlay[which(sdm_mpaoverlay[,1]>0),str_detect(colnames(sdm_mpaoverlay),end_temp)]+1
}
View(sdm_mpaoverlay)
# run a loop to extract which mpas each species was found in
sdm_mpaoverlay = data.frame(1:38) # empty data frame to fill from loop
# add empty columns to fill with status and endemism total per MPA
sdm_mpaoverlay$status_sum_CR = 0
sdm_mpaoverlay$status_sum_EN = 0
sdm_mpaoverlay$status_sum_VU = 0
sdm_mpaoverlay$endemism_sum_1 = 0
sdm_mpaoverlay$endemism_sum_2 = 0
sdm_mpaoverlay$endemism_sum_0 = 0
# remove skeleton column
sdm_mpaoverlay$X1.38 = NULL
i=1
# extract presence of each species per mpa
spp_temp = extract(sdms_thresholds[[i]],mpas,fun = mean,na.rm=TRUE)
# convert values to dataframe
spp_temp  = as.data.frame(spp_temp)
# add each dataframe to main dataframe
sdm_mpaoverlay = cbind(spp_temp,sdm_mpaoverlay)
# change column name
colnames(sdm_mpaoverlay)
# change column name
colnames(sdm_mpaoverlay)[1]
# change column name
colnames(sdm_mpaoverlay)[1] = "V"
colnames(sdm_mpaoverlay)
# run a loop to extract which mpas each species was found in
sdm_mpaoverlay = data.frame(1:38) # empty data frame to fill from loop
# add empty columns to fill with status and endemism total per MPA
sdm_mpaoverlay$status_sum_CR = 0
sdm_mpaoverlay$status_sum_EN = 0
sdm_mpaoverlay$status_sum_VU = 0
sdm_mpaoverlay$endemism_sum_1 = 0
sdm_mpaoverlay$endemism_sum_2 = 0
sdm_mpaoverlay$endemism_sum_0 = 0
# remove skeleton column
sdm_mpaoverlay$X1.38 = NULL
# run loop for each species distribution
for(i in 1:nlayers(sdms_thresholds)){
# extract presence of each species per mpa
spp_temp = extract(sdms_thresholds[[i]],mpas,fun = mean,na.rm=TRUE)
# convert values to dataframe
spp_temp  = as.data.frame(spp_temp)
# add each dataframe to main dataframe
sdm_mpaoverlay = cbind(spp_temp,sdm_mpaoverlay)
# change column name
colnames(sdm_mpaoverlay)[1] = "V"
# convert any non 0 value to 1 to indicate presence
sdm_mpaoverlay[which(sdm_mpaoverlay[,1]>0),1] = 1
# get status and endemism of species
master_temp = master %>%
filter(SPECIES_SCIENTIFIC %in% str_replace(names(sdms_thresholds[[i]]),"\\."," ") )
status_temp = master_temp$STATUS
end_temp = master_temp$ENDEMIC.STATUS
# add 1 to appropriate column (but only for MPAs where species was found )
sdm_mpaoverlay[which(sdm_mpaoverlay[,1]>0),str_detect(colnames(sdm_mpaoverlay),status_temp)] = sdm_mpaoverlay[which(sdm_mpaoverlay[,1]>0),str_detect(colnames(sdm_mpaoverlay),status_temp)]+1
sdm_mpaoverlay[which(sdm_mpaoverlay[,1]>0),str_detect(colnames(sdm_mpaoverlay),end_temp)] = sdm_mpaoverlay[which(sdm_mpaoverlay[,1]>0),str_detect(colnames(sdm_mpaoverlay),end_temp)]+1
}
sdm_mpaoverlay
View(sdm_mpaoverlay)
# calculate row sums
sdm_mpaoverlay$sum = rowSums(sdm_mpaoverlay[,1:80], na.rm = TRUE)
# discard all but the row sums
sdm_mpaoverlay[,1:80] = NULL
View(sdm_mpaoverlay)
mpas
mpas[,1]
mpas[,3]
sdm_mpaoverlay$sum
# add to mpa shapefile
mpas$sum_species = sdm_mpaoverlay$sum
# run a loop to extract which mpas each species was found in
sdm_mpaoverlay = data.frame(1:38) # empty data frame to fill from loop
# add empty columns to fill with status and endemism total per MPA
sdm_mpaoverlay$status_sum_CR = 0
sdm_mpaoverlay$status_sum_EN = 0
sdm_mpaoverlay$status_sum_VU = 0
sdm_mpaoverlay$endemism_sum_1 = 0
sdm_mpaoverlay$endemism_sum_2 = 0
sdm_mpaoverlay$endemism_sum_0 = 0
# remove skeleton column
sdm_mpaoverlay$X1.38 = NULL
i=1
# extract presence of each species per mpa
spp_temp = extract(sdms_thresholds[[i]],mpas,fun = mean,na.rm=TRUE)
# convert values to dataframe
spp_temp  = as.data.frame(spp_temp)
spp_temp
# convert any non 0 value to 1 to indicate presence
spp_temp[which(spp_temp[,1]>0),1] = 1
spp_temp
sdm_mpaoverlay
# run a loop to extract which mpas each species was found in
sdm_mpaoverlay = data.frame(1:38) # empty data frame to fill from loop
# add empty columns to fill with status and endemism total per MPA
sdm_mpaoverlay$sum = 0
sdm_mpaoverlay$status_sum_CR = 0
sdm_mpaoverlay$status_sum_EN = 0
sdm_mpaoverlay$status_sum_VU = 0
sdm_mpaoverlay$endemism_sum_1 = 0
sdm_mpaoverlay$endemism_sum_2 = 0
sdm_mpaoverlay$endemism_sum_0 = 0
# remove skeleton column
sdm_mpaoverlay$X1.38 = NULL
# extract presence of each species per mpa
spp_temp = extract(sdms_thresholds[[i]],mpas,fun = mean,na.rm=TRUE)
# convert values to dataframe
spp_temp  = as.data.frame(spp_temp)
# convert any non 0 value to 1 to indicate presence
spp_temp[which(spp_temp[,1]>0),1] = 1
# add each dataframe to main dataframe
sdm_mpaoverlay$sum =  sdm_mpaoverlay$sum + spp_temp$V1
sdm_mpaoverlay$sum
# get status and endemism of species
master_temp = master %>%
filter(SPECIES_SCIENTIFIC %in% str_replace(names(sdms_thresholds[[i]]),"\\."," ") )
status_temp = master_temp$STATUS
end_temp = master_temp$ENDEMIC.STATUS
sdm_mpaoverlay[which(sdm_mpaoverlay[,1]>0),str_detect(colnames(sdm_mpaoverlay),status_temp)]
# run a loop to extract which mpas each species was found in
sdm_mpaoverlay = data.frame(1:38) # empty data frame to fill from loop
# add empty columns to fill with status and endemism total per MPA
sdm_mpaoverlay$sum = 0
sdm_mpaoverlay$status_sum_CR = 0
sdm_mpaoverlay$status_sum_EN = 0
sdm_mpaoverlay$status_sum_VU = 0
sdm_mpaoverlay$endemism_sum_1 = 0
sdm_mpaoverlay$endemism_sum_2 = 0
sdm_mpaoverlay$endemism_sum_0 = 0
# remove skeleton column
sdm_mpaoverlay$X1.38 = NULL
# run loop for each species distribution
for(i in 1:nlayers(sdms_thresholds)){
# extract presence of each species per mpa
spp_temp = extract(sdms_thresholds[[i]],mpas,fun = mean,na.rm=TRUE)
# convert values to dataframe
spp_temp  = as.data.frame(spp_temp)
# convert any non 0 value to 1 to indicate presence
spp_temp[which(spp_temp[,1]>0),1] = 1
# add each dataframe to main dataframe
sdm_mpaoverlay$sum =  sdm_mpaoverlay$sum + spp_temp$V1
# get status and endemism of species
master_temp = master %>%
filter(SPECIES_SCIENTIFIC %in% str_replace(names(sdms_thresholds[[i]]),"\\."," ") )
status_temp = master_temp$STATUS
end_temp = master_temp$ENDEMIC.STATUS
# add 1 to appropriate column (but only for MPAs where species was found )
sdm_mpaoverlay[which(sdm_mpaoverlay[,1]>0),str_detect(colnames(sdm_mpaoverlay),status_temp)] = sdm_mpaoverlay[which(sdm_mpaoverlay[,1]>0),str_detect(colnames(sdm_mpaoverlay),status_temp)]+1
sdm_mpaoverlay[which(sdm_mpaoverlay[,1]>0),str_detect(colnames(sdm_mpaoverlay),end_temp)] = sdm_mpaoverlay[which(sdm_mpaoverlay[,1]>0),str_detect(colnames(sdm_mpaoverlay),end_temp)]+1
}
sdm_mpaoverlay
View(sdm_mpaoverlay)
i=1
# run a loop to extract which mpas each species was found in
sdm_mpaoverlay = data.frame(1:38) # empty data frame to fill from loop
# add empty columns to fill with status and endemism total per MPA
sdm_mpaoverlay$sum = 0
sdm_mpaoverlay$status_sum_CR = 0
sdm_mpaoverlay$status_sum_EN = 0
sdm_mpaoverlay$status_sum_VU = 0
sdm_mpaoverlay$endemism_sum_1 = 0
sdm_mpaoverlay$endemism_sum_2 = 0
sdm_mpaoverlay$endemism_sum_0 = 0
# remove skeleton column
sdm_mpaoverlay$X1.38 = NULL
# extract presence of each species per mpa
spp_temp = extract(sdms_thresholds[[i]],mpas,fun = mean,na.rm=TRUE)
# convert values to dataframe
spp_temp  = as.data.frame(spp_temp)
# convert any non 0 value to 1 to indicate presence
spp_temp[which(spp_temp[,1]>0),1] = 1
# add each dataframe to main dataframe
sdm_mpaoverlay$sum =  sdm_mpaoverlay$sum + spp_temp$V1
sdm_mpaoverlay
# get status and endemism of species
master_temp = master %>%
filter(SPECIES_SCIENTIFIC %in% str_replace(names(sdms_thresholds[[i]]),"\\."," ") )
status_temp = master_temp$STATUS
end_temp = master_temp$ENDEMIC.STATUS
which(sdm_mpaoverlay[,1]>0)
# add 1 to appropriate column (but only for MPAs where species was found )
rows = which(sdm_mpaoverlay[,1]>0)
str_detect(colnames(sdm_mpaoverlay),status_temp)
str_detect(colnames(sdm_mpaoverlay),end_temp)
sdm_mpaoverlay[rows,str_detect(colnames(sdm_mpaoverlay),status_temp)]
sdm_mpaoverlay[rows,str_detect(colnames(sdm_mpaoverlay),status_temp)] = sdm_mpaoverlay[rows,str_detect(colnames(sdm_mpaoverlay),status_temp)]+1
sdm_mpaoverlay[rows,str_detect(colnames(sdm_mpaoverlay),end_temp)] = sdm_mpaoverlay[rows,str_detect(colnames(sdm_mpaoverlay),end_temp)]+1
i=2
# extract presence of each species per mpa
spp_temp = extract(sdms_thresholds[[i]],mpas,fun = mean,na.rm=TRUE)
# convert values to dataframe
spp_temp  = as.data.frame(spp_temp)
# convert any non 0 value to 1 to indicate presence
spp_temp[which(spp_temp[,1]>0),1] = 1
spp_temp
sdm_mpaoverlay$sum
spp_temp$V1
# add each dataframe to main dataframe
sdm_mpaoverlay$sum =  sdm_mpaoverlay$sum + spp_temp$V1
sdm_mpaoverlay$sum
# get status and endemism of species
master_temp = master %>%
filter(SPECIES_SCIENTIFIC %in% str_replace(names(sdms_thresholds[[i]]),"\\."," ") )
status_temp = master_temp$STATUS
end_temp = master_temp$ENDEMIC.STATUS
which(sdm_mpaoverlay$sum>0)
# add 1 to appropriate column (but only for MPAs where species was found )
rows = which(spp_temp[,1]>0)
rows
sdm_mpaoverlay[rows,str_detect(colnames(sdm_mpaoverlay),status_temp)] = sdm_mpaoverlay[rows,str_detect(colnames(sdm_mpaoverlay),status_temp)]+1
sdm_mpaoverlay[rows,str_detect(colnames(sdm_mpaoverlay),end_temp)] = sdm_mpaoverlay[rows,str_detect(colnames(sdm_mpaoverlay),end_temp)]+1
# run a loop to extract which mpas each species was found in
sdm_mpaoverlay = data.frame(1:38) # empty data frame to fill from loop
# add empty columns to fill with status and endemism total per MPA
sdm_mpaoverlay$sum = 0
sdm_mpaoverlay$status_sum_CR = 0
sdm_mpaoverlay$status_sum_EN = 0
sdm_mpaoverlay$status_sum_VU = 0
sdm_mpaoverlay$endemism_sum_1 = 0
sdm_mpaoverlay$endemism_sum_2 = 0
sdm_mpaoverlay$endemism_sum_0 = 0
# remove skeleton column
sdm_mpaoverlay$X1.38 = NULL
# run loop for each species distribution
for(i in 1:nlayers(sdms_thresholds)){
# extract presence of each species per mpa
spp_temp = extract(sdms_thresholds[[i]],mpas,fun = mean,na.rm=TRUE)
# convert values to dataframe
spp_temp  = as.data.frame(spp_temp)
# convert any non 0 value to 1 to indicate presence
spp_temp[which(spp_temp[,1]>0),1] = 1
# add each dataframe to main dataframe
sdm_mpaoverlay$sum =  sdm_mpaoverlay$sum + spp_temp$V1
# get status and endemism of species
master_temp = master %>%
filter(SPECIES_SCIENTIFIC %in% str_replace(names(sdms_thresholds[[i]]),"\\."," ") )
status_temp = master_temp$STATUS
end_temp = master_temp$ENDEMIC.STATUS
# add 1 to appropriate column (but only for MPAs where species was found )
rows = which(spp_temp[,1]>0)
sdm_mpaoverlay[rows,str_detect(colnames(sdm_mpaoverlay),status_temp)] = sdm_mpaoverlay[rows,str_detect(colnames(sdm_mpaoverlay),status_temp)]+1
sdm_mpaoverlay[rows,str_detect(colnames(sdm_mpaoverlay),end_temp)] = sdm_mpaoverlay[rows,str_detect(colnames(sdm_mpaoverlay),end_temp)]+1
}
View(master)
View(sdm_mpaoverlay)
# South African continental marine protected areas
mpas = st_read(list.files(pattern ="SAMPAZ_OR_2021_Q3.shp" ,recursive = TRUE, full.names = TRUE))
# simplify MPA shapefile
mpas = mpas %>%
filter(CUR_NME != "Prince Edward Island Marine Protected Area") %>%
group_by(CUR_NME) %>%
summarise()
# simplify mpas
mpas = st_simplify(mpas,dTolerance = 100)
cbind(mpas,sdm_mpaoverlay)
# add to mpa shapefile
mpas = cbind(mpas,sdm_mpaoverlay)
# save shaepfile to make map in QGIS
shapefile(mpas,"mpas_speciestotal.shp")
mpas
?shapefile
# save shaepfile to make map in QGIS
mpas = as(mpas, Class = "Spatial")
shapefile(mpas,"mpas_speciestotal.shp")
# ---------------------------------
# PACKAGES
# ---------------------------------
# list of required packages
requiredpackages = c("rgeos","sf","dplyr","tidyr","prioritizr","gurobi","stringr","rasterVis","viridis","raster","scales","readxl","fasterize","sdmvspecies","RColorBrewer")
# check which packages you need to install
requiredpackages = requiredpackages[which(!(requiredpackages %in% installed.packages()))]
# install packages
install.packages(requiredpackages)
lapply(requiredpackages,require, character.only = TRUE)
rm(requiredpackages)
my.directory = paste0(path,"Dropbox/6-WILDOCEANS")
# load packages
requiredpackages = c("rgeos","sf","dplyr","tidyr","prioritizr","gurobi","stringr","rasterVis","viridis","raster","scales","readxl","fasterize","sdmvspecies","RColorBrewer")
# ---------------------------------
# DEFINE WORKING DIRECTORY
# ---------------------------------
# set directory to same parent folder where sub-scripts are found
# the subs-scripts can be in folders within this directory as the code will look through all the folders
path =  "/Users/nfb/" # path for mac
# set directory
setwd(my.directory)
# ---------------------------------
# DEFINE WORKING DIRECTORY
# ---------------------------------
# set directory to same parent folder where sub-scripts are found
# the subs-scripts can be in folders within this directory as the code will look through all the folders
path =  "/Users/nfb/" # path for mac
my.directory = paste0(path,"Dropbox/6-WILDOCEANS")
# set directory
setwd(my.directory)
# ---------------------------------
# PLANNING UNITS
# ---------------------------------
# Load the planning unit grid at 10 x 10 km or 5 x 5 km resolution
# Each grid cell has a value of 1 which represents the cost of that grid cell
pu = raster(list.files(pattern = "template_10km.tif",full.names = TRUE,recursive = TRUE))
# ---------------------------------
# ---------------------------------
# SPECIES INFO
# ---------------------------------
# load data summary sheet
master = read_xlsx(list.files(pattern = "data_summary_master.xlsx", recursive = TRUE,full.names = TRUE)[1],sheet = 1)
# load pelagic species that we remove for the conservation plan
source(list.files(pattern = "pelagic_spp.R", recursive = TRUE))
# ---------------------------------
# ---------------------------------
# TARGETS
# ---------------------------------
# load target file
targets = read_xlsx(list.files(pattern = "perc_targets", recursive = TRUE,full.names = TRUE))
targets = targets %>%
pivot_longer(!STATUS,names_to = "ENDEMIC.STATUS",values_to = "target")
# add targets to master sheet
master = left_join(master,targets)
rm(targets)
# ---------------------------------
# ---------------------------------
# BIODIVERSITY FEATURES
# ---------------------------------
source(list.files(pattern = "Conservationfeatures.R", recursive = TRUE))
# ---------------------------------
# ---------------------------------
# IUCN FEATURES
# ---------------------------------
source(list.files(pattern = "iucnmaps.R", recursive = TRUE))
# ---------------------------------
# ---------------------------------
# COSTS
# ---------------------------------
source(list.files(pattern = "costs_2018NBA.R", recursive = TRUE))
# ---------------------------------
# ---------------------------------
# LOCKED IN AREAS
# ---------------------------------
source(list.files(pattern = "Lockedin.R", recursive = TRUE))
# ---------------------------------
# ---------------------------------
# BIODIVERSITY FEATURE GROUPS
# SPECIAL SPECIES 1 (CR, EN, ENDEMICS TO SOUTH AFRICA)
# ---------------------------------
# Filter master sheet to extract those species
special_species_1 = master %>%
filter(ENDEMIC.STATUS %in% c("1") | STATUS %in% c("CR","EN"))
# remove pelagics
special_species_1 = special_species_1 %>%
filter(!(SPECIES_SCIENTIFIC %in% pelagic_species))
# filter biodiversity raster stacks to extract special species 1
# filtered stack
idx = which(str_replace(names(sdms_thresholds),"\\."," ") %in% special_species_1$SPECIES_SCIENTIFIC)
sdms_specialspp1 = subset(sdms_thresholds,idx)
# iucn stack
idx = which(str_replace(names(iucn_stack_all),"\\."," ") %in% special_species_1$SPECIES_SCIENTIFIC)
features_iucn_specialspp1 = subset(iucn_stack_all,idx)
# ---------------------------------
# BIODIVERSITY FEATURE GROUPS
# SPECIAL SPECIES 2 (CR, EN, VU, ENDEMICS TO SOUTHERN AFRICA)
# ---------------------------------
# Filter master sheet to extract those species
special_species_2 = master %>%
filter(ENDEMIC.STATUS %in% c("1","2") | STATUS %in% c("CR","EN","VU"))
# remove pelagics
special_species_2 = special_species_2 %>%
filter(!(SPECIES_SCIENTIFIC %in% pelagic_species))
# filter biodiversity raster stacks to extract special species 2
# filtered stack
idx = which(str_replace(names(sdms_thresholds),"\\."," ") %in% special_species_2$SPECIES_SCIENTIFIC)
sdms_specialspp2 = subset(sdms_thresholds,idx)
# iucn stack
idx = which(str_replace(names(iucn_stack_all),"\\."," ") %in% special_species_2$SPECIES_SCIENTIFIC)
features_iucn_specialspp2 = subset(iucn_stack_all,idx)
# ---------------------------------
# ---------------------------------
# BUILDING AND SOLVING A CONSERVATION PROBLEM
# ---------------------------------
# parent folder to save all solution outputs
solutionsfolder = "ConservationPlan/Planning/Outputs/solutions/rasters_rawsolutions_working/"
# parent folder to save all performance outputs
performancefolder = "ConservationPlan/Planning/Outputs/solutions/performances_working/"
# turn off scientific numbering
options(scipen = 100)
# scenarios
scenario_sheet = read_xlsx(path=paste0(path,"Dropbox/6-WILDOCEANS/ConservationPlan/Planning/scenarios.xlsx"),sheet = 1)
# start counter
problem_number = 0
